Search.setIndex({"alltitles": {"Auto-disabled for certain event types": [[16, "auto-disabled-for-certain-event-types"]], "Bot Permissions required": [[16, "bot-permissions-required"]], "C/C++ Linting Package": [[14, "c-c-linting-package"]], "Command Line Interface Options": [[13, "command-line-interface-options"]], "File Changes": [[15, "file-changes"]], "Have question or feedback?": [[14, "have-question-or-feedback"]], "Hint": [[11, null], [16, null]], "How to build the docs": [[12, "how-to-build-the-docs"]], "Important": [[13, null]], "License": [[14, "license"]], "Note": [[3, null], [7, null], [7, null], [13, null], [13, null], [13, null]], "Optional Arguments": [[13, "optional-arguments"]], "Positional Arguments": [[13, "positional-arguments"]], "Posts a new review on each run": [[16, "posts-a-new-review-on-each-run"]], "Probable non-exhaustive reviews": [[16, "probable-non-exhaustive-reviews"]], "Pull Request Review Caveats": [[16, "pull-request-review-caveats"]], "Pull Request Reviews": [[15, "pull-request-reviews"]], "Seealso": [[11, null], [13, null], [16, null], [16, null]], "Thread Comments": [[15, "thread-comments"]], "Tip": [[5, null], [5, null], [16, null]], "Token Permissions": [[15, "token-permissions"]], "Usage": [[14, "usage"]], "__init__": [[0, "module-cpp_linter"]], "clang_tools": [[1, "module-cpp_linter.clang_tools"]], "clang_tools.clang_format": [[2, "module-cpp_linter.clang_tools.clang_format"]], "clang_tools.clang_tidy": [[3, "module-cpp_linter.clang_tools.clang_tidy"]], "cli": [[4, "module-cpp_linter.cli"]], "common_fs": [[5, "module-cpp_linter.common_fs"]], "common_fs.file_filter": [[6, "module-cpp_linter.common_fs.file_filter"]], "git": [[7, "module-cpp_linter.git"]], "git.git_str": [[8, "module-cpp_linter.git.git_str"]], "loggers": [[9, "module-cpp_linter.loggers"]], "rest_api": [[10, "module-cpp_linter.rest_api"]], "rest_api.github_api": [[11, "module-cpp_linter.rest_api.github_api"]]}, "docurls": ["API-Reference/cpp_linter.html", "API-Reference/cpp_linter.clang_tools.html", "API-Reference/cpp_linter.clang_tools.clang_format.html", "API-Reference/cpp_linter.clang_tools.clang_tidy.html", "API-Reference/cpp_linter.cli.html", "API-Reference/cpp_linter.common_fs.html", "API-Reference/cpp_linter.common_fs.file_filter.html", "API-Reference/cpp_linter.git.html", "API-Reference/cpp_linter.git.git_str.html", "API-Reference/cpp_linter.loggers.html", "API-Reference/cpp_linter.rest_api.html", "API-Reference/cpp_linter.rest_api.github_api.html", "building_docs.html", "cli_args.html", "index.html", "permissions.html", "pr_review_caveats.html"], "envversion": {"sphinx": 61, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1}, "indexentries": {"--database": [[13, "cmdoption-p", false]], "--extensions": [[13, "cmdoption-e", false]], "--extra-arg": [[13, "cmdoption-x", false]], "--file-annotations": [[13, "cmdoption-a", false]], "--files-changed-only": [[13, "cmdoption-f", false]], "--format-review": [[13, "cmdoption-m", false]], "--ignore": [[13, "cmdoption-i", false]], "--ignore-format": [[13, "cmdoption-M", false]], "--ignore-tidy": [[13, "cmdoption-D", false]], "--jobs": [[13, "cmdoption-j", false]], "--lines-changed-only": [[13, "cmdoption-l", false]], "--no-lgtm": [[13, "cmdoption-g", false]], "--passive-reviews": [[13, "cmdoption-R", false]], "--repo-root": [[13, "cmdoption-r", false]], "--step-summary": [[13, "cmdoption-w", false]], "--style": [[13, "cmdoption-s", false]], "--thread-comments": [[13, "cmdoption-t", false]], "--tidy-checks": [[13, "cmdoption-c", false]], "--tidy-review": [[13, "cmdoption-d", false]], "--verbosity": [[13, "cmdoption-v", false]], "--version": [[13, "cmdoption-V", false]], "-a": [[13, "cmdoption-a", false]], "-c": [[13, "cmdoption-c", false]], "-d": [[13, "cmdoption-D", false], [13, "cmdoption-d", false]], "-e": [[13, "cmdoption-e", false]], "-f": [[13, "cmdoption-f", false]], "-g": [[13, "cmdoption-g", false]], "-i": [[13, "cmdoption-i", false]], "-j": [[13, "cmdoption-j", false]], "-l": [[13, "cmdoption-l", false]], "-m": [[13, "cmdoption-M", false], [13, "cmdoption-m", false]], "-p": [[13, "cmdoption-p", false]], "-r": [[13, "cmdoption-R", false], [13, "cmdoption-r", false]], "-s": [[13, "cmdoption-s", false]], "-t": [[13, "cmdoption-t", false]], "-v": [[13, "cmdoption-V", false], [13, "cmdoption-v", false]], "-w": [[13, "cmdoption-w", false]], "-x": [[13, "cmdoption-x", false]], "additions (cpp_linter.common_fs.fileobj attribute)": [[5, "cpp_linter.common_fs.FileObj.additions", false]], "api_request() (cpp_linter.rest_api.restapiclient method)": [[10, "cpp_linter.rest_api.RestApiClient.api_request", false]], "api_url (cpp_linter.rest_api.github_api.githubapiclient attribute)": [[11, "cpp_linter.rest_api.github_api.GithubApiClient.api_url", false]], "applied_fixes (cpp_linter.clang_tools.clang_tidy.tidynotification attribute)": [[3, "cpp_linter.clang_tools.clang_tidy.TidyNotification.applied_fixes", false]], "args (class in cpp_linter.cli)": [[4, "cpp_linter.cli.Args", false]], "assemble_version_exec() (in module cpp_linter.clang_tools)": [[1, "cpp_linter.clang_tools.assemble_version_exec", false]], "cache_path (in module cpp_linter.common_fs)": [[5, "cpp_linter.common_fs.CACHE_PATH", false]], "capture_clang_tools_output() (in module cpp_linter.clang_tools)": [[1, "cpp_linter.clang_tools.capture_clang_tools_output", false]], "cols (cpp_linter.clang_tools.clang_format.formatreplacement attribute)": [[2, "cpp_linter.clang_tools.clang_format.FormatReplacement.cols", false]], "cols (cpp_linter.clang_tools.clang_tidy.tidynotification attribute)": [[3, "cpp_linter.clang_tools.clang_tidy.TidyNotification.cols", false]], "command line option": [[13, "cmdoption-D", false], [13, "cmdoption-M", false], [13, "cmdoption-R", false], [13, "cmdoption-V", false], [13, "cmdoption-a", false], [13, "cmdoption-arg-files", false], [13, "cmdoption-c", false], [13, "cmdoption-d", false], [13, "cmdoption-e", false], [13, "cmdoption-f", false], [13, "cmdoption-g", false], [13, "cmdoption-i", false], [13, "cmdoption-j", false], [13, "cmdoption-l", false], [13, "cmdoption-m", false], [13, "cmdoption-p", false], [13, "cmdoption-r", false], [13, "cmdoption-s", false], [13, "cmdoption-t", false], [13, "cmdoption-v", false], [13, "cmdoption-w", false], [13, "cmdoption-x", false]], "cpp_linter": [[0, "module-cpp_linter", false]], "cpp_linter.clang_tools": [[1, "module-cpp_linter.clang_tools", false]], "cpp_linter.clang_tools.clang_format": [[2, "module-cpp_linter.clang_tools.clang_format", false]], "cpp_linter.clang_tools.clang_tidy": [[3, "module-cpp_linter.clang_tools.clang_tidy", false]], "cpp_linter.cli": [[4, "module-cpp_linter.cli", false]], "cpp_linter.common_fs": [[5, "module-cpp_linter.common_fs", false]], "cpp_linter.common_fs.file_filter": [[6, "module-cpp_linter.common_fs.file_filter", false]], "cpp_linter.git": [[7, "module-cpp_linter.git", false]], "cpp_linter.git.git_str": [[8, "module-cpp_linter.git.git_str", false]], "cpp_linter.loggers": [[9, "module-cpp_linter.loggers", false]], "cpp_linter.rest_api": [[10, "module-cpp_linter.rest_api", false]], "cpp_linter.rest_api.github_api": [[11, "module-cpp_linter.rest_api.github_api", false]], "create_review_comments() (cpp_linter.rest_api.github_api.githubapiclient static method)": [[11, "cpp_linter.rest_api.github_api.GithubApiClient.create_review_comments", false]], "database (cpp_linter.cli.args attribute)": [[4, "cpp_linter.cli.Args.database", false]], "debug_enabled (cpp_linter.rest_api.github_api.githubapiclient attribute)": [[11, "cpp_linter.rest_api.github_api.GithubApiClient.debug_enabled", false]], "diagnostic (cpp_linter.clang_tools.clang_tidy.tidynotification attribute)": [[3, "cpp_linter.clang_tools.clang_tidy.TidyNotification.diagnostic", false]], "diagnostic_link (cpp_linter.clang_tools.clang_tidy.tidynotification property)": [[3, "cpp_linter.clang_tools.clang_tidy.TidyNotification.diagnostic_link", false]], "diff_chunks (cpp_linter.common_fs.fileobj attribute)": [[5, "cpp_linter.common_fs.FileObj.diff_chunks", false]], "end_log_group() (in module cpp_linter.loggers)": [[9, "cpp_linter.loggers.end_log_group", false]], "event_name (cpp_linter.rest_api.github_api.githubapiclient attribute)": [[11, "cpp_linter.rest_api.github_api.GithubApiClient.event_name", false]], "extensions (cpp_linter.cli.args attribute)": [[4, "cpp_linter.cli.Args.extensions", false]], "extensions (cpp_linter.common_fs.file_filter.filefilter attribute)": [[6, "cpp_linter.common_fs.file_filter.FileFilter.extensions", false]], "extra_arg (cpp_linter.cli.args attribute)": [[4, "cpp_linter.cli.Args.extra_arg", false]], "file_annotations (cpp_linter.cli.args attribute)": [[4, "cpp_linter.cli.Args.file_annotations", false]], "filefilter (class in cpp_linter.common_fs.file_filter)": [[6, "cpp_linter.common_fs.file_filter.FileFilter", false]], "filename (cpp_linter.clang_tools.clang_format.formatadvice attribute)": [[2, "cpp_linter.clang_tools.clang_format.FormatAdvice.filename", false]], "filename (cpp_linter.clang_tools.clang_tidy.tidynotification attribute)": [[3, "cpp_linter.clang_tools.clang_tidy.TidyNotification.filename", false]], "fileobj (class in cpp_linter.common_fs)": [[5, "cpp_linter.common_fs.FileObj", false]], "files": [[13, "cmdoption-arg-files", false]], "files (cpp_linter.cli.args attribute)": [[4, "cpp_linter.cli.Args.files", false]], "files_changed_only (cpp_linter.cli.args attribute)": [[4, "cpp_linter.cli.Args.files_changed_only", false]], "fixit_lines (cpp_linter.clang_tools.clang_tidy.tidynotification attribute)": [[3, "cpp_linter.clang_tools.clang_tidy.TidyNotification.fixit_lines", false]], "format_advice (cpp_linter.common_fs.fileobj attribute)": [[5, "cpp_linter.common_fs.FileObj.format_advice", false]], "format_review (cpp_linter.cli.args attribute)": [[4, "cpp_linter.cli.Args.format_review", false]], "formatadvice (class in cpp_linter.clang_tools.clang_format)": [[2, "cpp_linter.clang_tools.clang_format.FormatAdvice", false]], "formatfilefilter (class in cpp_linter.common_fs.file_filter)": [[6, "cpp_linter.common_fs.file_filter.FormatFileFilter", false]], "formatreplacement (class in cpp_linter.clang_tools.clang_format)": [[2, "cpp_linter.clang_tools.clang_format.FormatReplacement", false]], "formatreplacementline (class in cpp_linter.clang_tools.clang_format)": [[2, "cpp_linter.clang_tools.clang_format.FormatReplacementLine", false]], "get_cli_parser() (in module cpp_linter.cli)": [[4, "cpp_linter.cli.get_cli_parser", false]], "get_diff() (in module cpp_linter.git)": [[7, "cpp_linter.git.get_diff", false]], "get_line_cnt_from_cols() (in module cpp_linter.common_fs)": [[5, "cpp_linter.common_fs.get_line_cnt_from_cols", false]], "get_list_of_changed_files() (cpp_linter.rest_api.github_api.githubapiclient method)": [[11, "cpp_linter.rest_api.github_api.GithubApiClient.get_list_of_changed_files", false]], "get_list_of_changed_files() (cpp_linter.rest_api.restapiclient method)": [[10, "cpp_linter.rest_api.RestApiClient.get_list_of_changed_files", false]], "get_sha() (in module cpp_linter.git)": [[7, "cpp_linter.git.get_sha", false]], "githubapiclient (class in cpp_linter.rest_api.github_api)": [[11, "cpp_linter.rest_api.github_api.GithubApiClient", false]], "has_line_changes() (in module cpp_linter.common_fs)": [[5, "cpp_linter.common_fs.has_line_changes", false]], "has_more_pages() (cpp_linter.rest_api.restapiclient static method)": [[10, "cpp_linter.rest_api.RestApiClient.has_more_pages", false]], "ignore (cpp_linter.cli.args attribute)": [[4, "cpp_linter.cli.Args.ignore", false]], "ignore_format (cpp_linter.cli.args attribute)": [[4, "cpp_linter.cli.Args.ignore_format", false]], "ignore_tidy (cpp_linter.cli.args attribute)": [[4, "cpp_linter.cli.Args.ignore_tidy", false]], "ignored (cpp_linter.common_fs.file_filter.filefilter attribute)": [[6, "cpp_linter.common_fs.file_filter.FileFilter.ignored", false]], "is_file_in_list() (cpp_linter.common_fs.file_filter.filefilter method)": [[6, "cpp_linter.common_fs.file_filter.FileFilter.is_file_in_list", false]], "is_hunk_contained() (cpp_linter.common_fs.fileobj method)": [[5, "cpp_linter.common_fs.FileObj.is_hunk_contained", false]], "is_range_contained() (cpp_linter.common_fs.fileobj method)": [[5, "cpp_linter.common_fs.FileObj.is_range_contained", false]], "is_source_or_ignored() (cpp_linter.common_fs.file_filter.filefilter method)": [[6, "cpp_linter.common_fs.file_filter.FileFilter.is_source_or_ignored", false]], "jobs (cpp_linter.cli.args attribute)": [[4, "cpp_linter.cli.Args.jobs", false]], "line (cpp_linter.clang_tools.clang_format.formatreplacementline attribute)": [[2, "cpp_linter.clang_tools.clang_format.FormatReplacementLine.line", false]], "line (cpp_linter.clang_tools.clang_tidy.tidynotification attribute)": [[3, "cpp_linter.clang_tools.clang_tidy.TidyNotification.line", false]], "lines_added (cpp_linter.common_fs.fileobj attribute)": [[5, "cpp_linter.common_fs.FileObj.lines_added", false]], "lines_changed_only (cpp_linter.cli.args attribute)": [[4, "cpp_linter.cli.Args.lines_changed_only", false]], "list_source_files() (cpp_linter.common_fs.file_filter.filefilter method)": [[6, "cpp_linter.common_fs.file_filter.FileFilter.list_source_files", false]], "log_response_msg() (in module cpp_linter.loggers)": [[9, "cpp_linter.loggers.log_response_msg", false]], "logger (in module cpp_linter.loggers)": [[9, "cpp_linter.loggers.logger", false]], "main() (in module cpp_linter)": [[0, "cpp_linter.main", false]], "make_annotations() (cpp_linter.rest_api.github_api.githubapiclient method)": [[11, "cpp_linter.rest_api.github_api.GithubApiClient.make_annotations", false]], "make_comment() (cpp_linter.rest_api.restapiclient static method)": [[10, "cpp_linter.rest_api.RestApiClient.make_comment", false]], "make_headers() (cpp_linter.rest_api.github_api.githubapiclient method)": [[11, "cpp_linter.rest_api.github_api.GithubApiClient.make_headers", false]], "make_headers() (cpp_linter.rest_api.restapiclient method)": [[10, "cpp_linter.rest_api.RestApiClient.make_headers", false]], "module": [[0, "module-cpp_linter", false], [1, "module-cpp_linter.clang_tools", false], [2, "module-cpp_linter.clang_tools.clang_format", false], [3, "module-cpp_linter.clang_tools.clang_tidy", false], [4, "module-cpp_linter.cli", false], [5, "module-cpp_linter.common_fs", false], [6, "module-cpp_linter.common_fs.file_filter", false], [7, "module-cpp_linter.git", false], [8, "module-cpp_linter.git.git_str", false], [9, "module-cpp_linter.loggers", false], [10, "module-cpp_linter.rest_api", false], [11, "module-cpp_linter.rest_api.github_api", false]], "name (cpp_linter.common_fs.fileobj attribute)": [[5, "cpp_linter.common_fs.FileObj.name", false]], "no_lgtm (cpp_linter.cli.args attribute)": [[4, "cpp_linter.cli.Args.no_lgtm", false]], "not_ignored (cpp_linter.common_fs.file_filter.filefilter attribute)": [[6, "cpp_linter.common_fs.file_filter.FileFilter.not_ignored", false]], "null_len (cpp_linter.clang_tools.clang_format.formatreplacement attribute)": [[2, "cpp_linter.clang_tools.clang_format.FormatReplacement.null_len", false]], "parse_diff() (in module cpp_linter.git)": [[7, "cpp_linter.git.parse_diff", false]], "parse_diff() (in module cpp_linter.git.git_str)": [[8, "cpp_linter.git.git_str.parse_diff", false]], "parse_format_replacements_xml() (in module cpp_linter.clang_tools.clang_format)": [[2, "cpp_linter.clang_tools.clang_format.parse_format_replacements_xml", false]], "parse_patch() (in module cpp_linter.git)": [[7, "cpp_linter.git.parse_patch", false]], "parse_submodules() (cpp_linter.common_fs.file_filter.filefilter method)": [[6, "cpp_linter.common_fs.file_filter.FileFilter.parse_submodules", false]], "parse_tidy_output() (in module cpp_linter.clang_tools.clang_tidy)": [[3, "cpp_linter.clang_tools.clang_tidy.parse_tidy_output", false]], "passive_reviews (cpp_linter.cli.args attribute)": [[4, "cpp_linter.cli.Args.passive_reviews", false]], "patched (cpp_linter.clang_tools.clang_format.formatadvice attribute)": [[2, "cpp_linter.clang_tools.clang_format.FormatAdvice.patched", false]], "post_feedback() (cpp_linter.rest_api.github_api.githubapiclient method)": [[11, "cpp_linter.rest_api.github_api.GithubApiClient.post_feedback", false]], "post_feedback() (cpp_linter.rest_api.restapiclient method)": [[10, "cpp_linter.rest_api.RestApiClient.post_feedback", false]], "pull_request (cpp_linter.rest_api.github_api.githubapiclient attribute)": [[11, "cpp_linter.rest_api.github_api.GithubApiClient.pull_request", false]], "range_of_changed_lines() (cpp_linter.common_fs.fileobj method)": [[5, "cpp_linter.common_fs.FileObj.range_of_changed_lines", false]], "ratelimitheaders (class in cpp_linter.rest_api)": [[10, "cpp_linter.rest_api.RateLimitHeaders", false]], "rationale (cpp_linter.clang_tools.clang_tidy.tidynotification attribute)": [[3, "cpp_linter.clang_tools.clang_tidy.TidyNotification.rationale", false]], "remaining (cpp_linter.rest_api.ratelimitheaders attribute)": [[10, "cpp_linter.rest_api.RateLimitHeaders.remaining", false]], "remove_bot_comments() (cpp_linter.rest_api.github_api.githubapiclient method)": [[11, "cpp_linter.rest_api.github_api.GithubApiClient.remove_bot_comments", false]], "replaced_lines (cpp_linter.clang_tools.clang_format.formatadvice attribute)": [[2, "cpp_linter.clang_tools.clang_format.FormatAdvice.replaced_lines", false]], "replacements (cpp_linter.clang_tools.clang_format.formatreplacementline attribute)": [[2, "cpp_linter.clang_tools.clang_format.FormatReplacementLine.replacements", false]], "repo (cpp_linter.rest_api.github_api.githubapiclient attribute)": [[11, "cpp_linter.rest_api.github_api.GithubApiClient.repo", false]], "repo_root (cpp_linter.cli.args attribute)": [[4, "cpp_linter.cli.Args.repo_root", false]], "reset (cpp_linter.rest_api.ratelimitheaders attribute)": [[10, "cpp_linter.rest_api.RateLimitHeaders.reset", false]], "restapiclient (class in cpp_linter.rest_api)": [[10, "cpp_linter.rest_api.RestApiClient", false]], "retry (cpp_linter.rest_api.ratelimitheaders attribute)": [[10, "cpp_linter.rest_api.RateLimitHeaders.retry", false]], "run_clang_format() (in module cpp_linter.clang_tools.clang_format)": [[2, "cpp_linter.clang_tools.clang_format.run_clang_format", false]], "run_clang_tidy() (in module cpp_linter.clang_tools.clang_tidy)": [[3, "cpp_linter.clang_tools.clang_tidy.run_clang_tidy", false]], "serialize() (cpp_linter.common_fs.fileobj method)": [[5, "cpp_linter.common_fs.FileObj.serialize", false]], "set_exit_code() (cpp_linter.rest_api.github_api.githubapiclient method)": [[11, "cpp_linter.rest_api.github_api.GithubApiClient.set_exit_code", false]], "set_exit_code() (cpp_linter.rest_api.restapiclient method)": [[10, "cpp_linter.rest_api.RestApiClient.set_exit_code", false]], "severity (cpp_linter.clang_tools.clang_tidy.tidynotification attribute)": [[3, "cpp_linter.clang_tools.clang_tidy.TidyNotification.severity", false]], "sha (cpp_linter.rest_api.github_api.githubapiclient attribute)": [[11, "cpp_linter.rest_api.github_api.GithubApiClient.sha", false]], "start_log_group() (in module cpp_linter.loggers)": [[9, "cpp_linter.loggers.start_log_group", false]], "step_summary (cpp_linter.cli.args attribute)": [[4, "cpp_linter.cli.Args.step_summary", false]], "style (cpp_linter.cli.args attribute)": [[4, "cpp_linter.cli.Args.style", false]], "tally_format_advice() (in module cpp_linter.clang_tools.clang_format)": [[2, "cpp_linter.clang_tools.clang_format.tally_format_advice", false]], "tally_tidy_advice() (in module cpp_linter.clang_tools.clang_tidy)": [[3, "cpp_linter.clang_tools.clang_tidy.tally_tidy_advice", false]], "text (cpp_linter.clang_tools.clang_format.formatreplacement attribute)": [[2, "cpp_linter.clang_tools.clang_format.FormatReplacement.text", false]], "thread_comments (cpp_linter.cli.args attribute)": [[4, "cpp_linter.cli.Args.thread_comments", false]], "tidy_advice (cpp_linter.common_fs.fileobj attribute)": [[5, "cpp_linter.common_fs.FileObj.tidy_advice", false]], "tidy_checks (cpp_linter.cli.args attribute)": [[4, "cpp_linter.cli.Args.tidy_checks", false]], "tidy_review (cpp_linter.cli.args attribute)": [[4, "cpp_linter.cli.Args.tidy_review", false]], "tidyfilefilter (class in cpp_linter.common_fs.file_filter)": [[6, "cpp_linter.common_fs.file_filter.TidyFileFilter", false]], "tidynotification (class in cpp_linter.clang_tools.clang_tidy)": [[3, "cpp_linter.clang_tools.clang_tidy.TidyNotification", false]], "update_comment() (cpp_linter.rest_api.github_api.githubapiclient method)": [[11, "cpp_linter.rest_api.github_api.GithubApiClient.update_comment", false]], "verbosity (cpp_linter.cli.args attribute)": [[4, "cpp_linter.cli.Args.verbosity", false]], "verify_files_are_present() (cpp_linter.rest_api.github_api.githubapiclient method)": [[11, "cpp_linter.rest_api.github_api.GithubApiClient.verify_files_are_present", false]], "version (cpp_linter.cli.args attribute)": [[4, "cpp_linter.cli.Args.version", false]]}, "objects": {"": [[0, 0, 0, 1, "cpp_linter", ""], [13, 8, 1, "cmdoption-p", "--database", ""], [13, 8, 1, "cmdoption-e", "--extensions", ""], [13, 8, 1, "cmdoption-x", "--extra-arg", ""], [13, 8, 1, "cmdoption-a", "--file-annotations", ""], [13, 8, 1, "cmdoption-f", "--files-changed-only", ""], [13, 8, 1, "cmdoption-m", "--format-review", ""], [13, 8, 1, "cmdoption-i", "--ignore", ""], [13, 8, 1, "cmdoption-M", "--ignore-format", ""], [13, 8, 1, "cmdoption-D", "--ignore-tidy", ""], [13, 8, 1, "cmdoption-j", "--jobs", ""], [13, 8, 1, "cmdoption-l", "--lines-changed-only", ""], [13, 8, 1, "cmdoption-g", "--no-lgtm", ""], [13, 8, 1, "cmdoption-R", "--passive-reviews", ""], [13, 8, 1, "cmdoption-r", "--repo-root", ""], [13, 8, 1, "cmdoption-w", "--step-summary", ""], [13, 8, 1, "cmdoption-s", "--style", ""], [13, 8, 1, "cmdoption-t", "--thread-comments", ""], [13, 8, 1, "cmdoption-c", "--tidy-checks", ""], [13, 8, 1, "cmdoption-d", "--tidy-review", ""], [13, 8, 1, "cmdoption-v", "--verbosity", ""], [13, 8, 1, "cmdoption-V", "--version", ""], [13, 8, 1, "cmdoption-D", "-D", ""], [13, 8, 1, "cmdoption-M", "-M", ""], [13, 8, 1, "cmdoption-R", "-R", ""], [13, 8, 1, "cmdoption-V", "-V", ""], [13, 8, 1, "cmdoption-a", "-a", ""], [13, 8, 1, "cmdoption-c", "-c", ""], [13, 8, 1, "cmdoption-d", "-d", ""], [13, 8, 1, "cmdoption-e", "-e", ""], [13, 8, 1, "cmdoption-f", "-f", ""], [13, 8, 1, "cmdoption-g", "-g", ""], [13, 8, 1, "cmdoption-i", "-i", ""], [13, 8, 1, "cmdoption-j", "-j", ""], [13, 8, 1, "cmdoption-l", "-l", ""], [13, 8, 1, "cmdoption-m", "-m", ""], [13, 8, 1, "cmdoption-p", "-p", ""], [13, 8, 1, "cmdoption-r", "-r", ""], [13, 8, 1, "cmdoption-s", "-s", ""], [13, 8, 1, "cmdoption-t", "-t", ""], [13, 8, 1, "cmdoption-v", "-v", ""], [13, 8, 1, "cmdoption-w", "-w", ""], [13, 8, 1, "cmdoption-x", "-x", ""], [13, 8, 1, "cmdoption-arg-files", "files", ""]], "cpp_linter": [[1, 0, 0, 1, "clang_tools", ""], [4, 0, 0, 1, "cli", ""], [5, 0, 0, 1, "common_fs", ""], [7, 0, 0, 1, "git", ""], [9, 0, 0, 1, "loggers", ""], [0, 1, 1, 0, "main", "The main script."], [10, 0, 0, 1, "rest_api", ""]], "cpp_linter.clang_tools": [[1, 1, 1, 0, "assemble_version_exec", "Assembles the command to the executable of the given clang tool based on given version information."], [1, 1, 1, 0, "capture_clang_tools_output", "Execute and capture all output from clang-tidy and clang-format. This aggregates results in the OUTPUT."], [2, 0, 0, 1, "clang_format", ""], [3, 0, 0, 1, "clang_tidy", ""]], "cpp_linter.clang_tools.assemble_version_exec": [[1, 2, 2, 0, "specified_version", "The version number or the installed path to a version of the tool's executable."], [1, 2, 2, 0, "tool_name", "The name of the clang tool to be executed."]], "cpp_linter.clang_tools.capture_clang_tools_output": [[1, 2, 2, 0, "args", "A namespace of parsed args from the CLI."], [1, 2, 2, 0, "files", "A list of files to analyze."]], "cpp_linter.clang_tools.clang_format": [[2, 3, 1, 0, "FormatAdvice", "A single object to represent each suggestion."], [2, 3, 1, 0, "FormatReplacement", "An object representing a single replacement."], [2, 3, 1, 0, "FormatReplacementLine", "An object that represents a replacement(s) for a single line."], [2, 1, 1, 0, "parse_format_replacements_xml", "Parse XML output of replacements from clang-format."], [2, 1, 1, 0, "run_clang_format", "Run clang-format on a certain file"], [2, 1, 1, 0, "tally_format_advice", "Returns the sum of clang-format errors"]], "cpp_linter.clang_tools.clang_format.FormatAdvice": [[2, 4, 1, 0, "filename", "The source file that the suggestion concerns."], [2, 4, 1, 0, "patched", "A buffer of the applied fixes from clang-format"], [2, 4, 1, 0, "replaced_lines", "A list of FormatReplacementLine representing replacement(s) on a single line."]], "cpp_linter.clang_tools.clang_format.FormatAdvice.__init__": [[2, 2, 2, 0, "filename", "The source file's name for which the contents of the xml file exported by clang-tidy."]], "cpp_linter.clang_tools.clang_format.FormatReplacement": [[2, 4, 1, 0, "cols", "The columns number of where the suggestion starts on the line"], [2, 4, 1, 0, "null_len", "The number of bytes removed by suggestion"], [2, 4, 1, 0, "text", "The bytearray of the suggestion"]], "cpp_linter.clang_tools.clang_format.FormatReplacement.__init__": [[2, 2, 2, 0, "cols", "The columns number of where the suggestion starts on the line"], [2, 2, 2, 0, "null_len", "The number of bytes removed by suggestion"], [2, 2, 2, 0, "text", "The bytearray of the suggestion"]], "cpp_linter.clang_tools.clang_format.FormatReplacementLine": [[2, 4, 1, 0, "line", "The line number of where the suggestion starts"], [2, 4, 1, 0, "replacements", "A list of FormatReplacement object(s) representing suggestions."]], "cpp_linter.clang_tools.clang_format.FormatReplacementLine.__init__": [[2, 2, 2, 0, "line_numb", "The line number of about the replacements"]], "cpp_linter.clang_tools.clang_format.parse_format_replacements_xml": [[2, 2, 2, 0, "file_obj", "The source file's info for which the contents of the xml that was exported by clang-format."], [2, 2, 2, 0, "lines_changed_only", "A flag that forces focus on only changes in the event's diff info."], [2, 2, 2, 0, "xml_out", "A string containing the XML output."]], "cpp_linter.clang_tools.clang_format.run_clang_format": [[2, 2, 2, 0, "command", "The clang-format command to use (usually a resolved path)."], [2, 2, 2, 0, "file_obj", "Information about the FileObj."], [2, 2, 2, 0, "format_review", "A flag to enable/disable creating a diff suggestion for PR review comments."], [2, 2, 2, 0, "lines_changed_only", "A flag that forces focus on only changes in the event's diff info."], [2, 2, 2, 0, "style", "The clang-format style rules to adhere. Set this to 'file' to use the relative-most .clang-format configuration file."]], "cpp_linter.clang_tools.clang_tidy": [[3, 3, 1, 0, "TidyNotification", "Create a object that decodes info from the clang-tidy output's initial line that details a specific notification."], [3, 1, 1, 0, "parse_tidy_output", "Parse clang-tidy stdout."], [3, 1, 1, 0, "run_clang_tidy", "Run clang-tidy on a certain file."], [3, 1, 1, 0, "tally_tidy_advice", "Returns the sum of clang-format errors"]], "cpp_linter.clang_tools.clang_tidy.TidyNotification": [[3, 4, 1, 0, "applied_fixes", "A list of line numbers where a suggested fix was applied."], [3, 4, 1, 0, "cols", "The columns of the line that triggered the notification."], [3, 4, 1, 0, "diagnostic", "The columns of the line that triggered the notification."], [3, 5, 1, 0, "diagnostic_link", "Creates a markdown link to the diagnostic documentation."], [3, 4, 1, 0, "filename", "The source filename concerning the notification."], [3, 4, 1, 0, "fixit_lines", "A list of lines for the code-block in the notification."], [3, 4, 1, 0, "line", "The line number of the source file."], [3, 4, 1, 0, "rationale", "The rationale of the notification."], [3, 4, 1, 0, "severity", "The priority level of notification (warning/error)."]], "cpp_linter.clang_tools.clang_tidy.TidyNotification.__init__": [[3, 2, 2, 0, "database", "The compilation database deserialized from JSON, only if --database argument points to a valid path containing a compile_commands.json file."], [3, 2, 2, 0, "notification_line", "The first line in the notification parsed into a tuple of str that represent the different components of the notification's details."]], "cpp_linter.clang_tools.clang_tidy.parse_tidy_output": [[3, 2, 2, 0, "database", "The compilation database deserialized from JSON, only if --database argument points to a valid path containing a compile_commands.json file."], [3, 2, 2, 0, "tidy_out", "The stdout from clang-tidy."]], "cpp_linter.clang_tools.clang_tidy.run_clang_tidy": [[3, 2, 2, 0, "checks", "The str of comma-separated regulate expressions that describe the desired clang-tidy checks to be enabled/configured."], [3, 2, 2, 0, "command", "The clang-tidy command to use (usually a resolved path)."], [3, 2, 2, 0, "database", "The path to the compilation database."], [3, 2, 2, 0, "db_json", "The compilation database deserialized from JSON, only if database parameter points to a valid path containing a compile_commands.json file."], [3, 2, 2, 0, "extra_args", "A list of extra arguments used by clang-tidy as compiler arguments."], [3, 2, 2, 0, "file_obj", "Information about the FileObj."], [3, 2, 2, 0, "lines_changed_only", "A flag that forces focus on only changes in the event's diff info."], [3, 2, 2, 0, "tidy_review", "A flag to enable/disable creating a diff suggestion for PR review comments."]], "cpp_linter.cli": [[4, 3, 1, 0, "Args", "A pseudo namespace declaration. Each attribute is initialized with the corresponding CLI arg's default value."], [4, 1, 1, 0, "get_cli_parser", ""]], "cpp_linter.cli.Args": [[4, 4, 1, 0, "database", "See --database."], [4, 4, 1, 0, "extensions", "See --extensions."], [4, 4, 1, 0, "extra_arg", "See --extra-arg."], [4, 4, 1, 0, "file_annotations", "See --file-annotations."], [4, 4, 1, 0, "files", "See files."], [4, 4, 1, 0, "files_changed_only", "See --files-changed-only."], [4, 4, 1, 0, "format_review", "See --format-review."], [4, 4, 1, 0, "ignore", "See --ignore."], [4, 4, 1, 0, "ignore_format", "See --ignore-format."], [4, 4, 1, 0, "ignore_tidy", "See --ignore-tidy."], [4, 4, 1, 0, "jobs", "See --jobs."], [4, 4, 1, 0, "lines_changed_only", "See --lines-changed-only."], [4, 4, 1, 0, "no_lgtm", "See --no-lgtm."], [4, 4, 1, 0, "passive_reviews", "See --passive-reviews."], [4, 4, 1, 0, "repo_root", "See --repo-root."], [4, 4, 1, 0, "step_summary", "See --step-summary."], [4, 4, 1, 0, "style", "See --style."], [4, 4, 1, 0, "thread_comments", "See --thread-comments."], [4, 4, 1, 0, "tidy_checks", "See --tidy-checks."], [4, 4, 1, 0, "tidy_review", "See --tidy-review."], [4, 4, 1, 0, "verbosity", "See --verbosity."], [4, 4, 1, 0, "version", "See --version."]], "cpp_linter.common_fs": [[5, 6, 1, 0, "CACHE_PATH", "A path to generated cache artifacts. (only used when verbosity is in debug mode)"], [5, 3, 1, 0, "FileObj", "A class to represent a single file being analyzed."], [6, 0, 0, 1, "file_filter", ""], [5, 1, 1, 0, "get_line_cnt_from_cols", "Gets a line count and columns offset from a file's absolute offset."], [5, 1, 1, 0, "has_line_changes", "Does this file actually apply to condition specified by lines_changed_only?"]], "cpp_linter.common_fs.FileObj": [[5, 4, 1, 0, "additions", "A list of line numbers that contain added changes. This will be empty if not focusing on lines changed only."], [5, 4, 1, 0, "diff_chunks", "A list of line numbers that define the beginning and ending of hunks in the diff. This will be empty if not focusing on lines changed only."], [5, 4, 1, 0, "format_advice", "The results from clang-format"], [5, 7, 1, 0, "is_hunk_contained", "Does a given hunk start and end within a single diff hunk?"], [5, 7, 1, 0, "is_range_contained", "Does the given start and end line numbers fit within a single diff hunk?"], [5, 4, 1, 0, "lines_added", "A list of line numbers that define the beginning and ending of ranges that have added changes. This will be empty if not focusing on lines changed only."], [5, 4, 1, 0, "name", "The file name"], [5, 7, 1, 0, "range_of_changed_lines", "Assemble a list of lines changed."], [5, 7, 1, 0, "serialize", "For easy debugging, use this method to serialize the FileObj into a json compatible dict."], [5, 4, 1, 0, "tidy_advice", "The results from clang-tidy"]], "cpp_linter.common_fs.FileObj.__init__": [[5, 2, 2, 0, "additions", "A list of line numbers that have added changes in the diff. This value is used to populate the lines_added property."], [5, 2, 2, 0, "diff_chunks", "The ranges that define the beginning and ending line numbers for all hunks in the diff."], [5, 2, 2, 0, "name", "The file name. This should use Unix style path delimiters (/), even on Windows."]], "cpp_linter.common_fs.FileObj.range_of_changed_lines": [[5, 2, 2, 0, "get_ranges", "A flag to return a list of sequences representing range parameters. Defaults to False since this is only required when constructing clang-tidy or clang-format CLI arguments."], [5, 2, 2, 0, "lines_changed_only", "A flag to indicate the focus of certain lines."]], "cpp_linter.common_fs.file_filter": [[6, 3, 1, 0, "FileFilter", "A reusable mechanism for parsing and validating file filters."], [6, 3, 1, 0, "FormatFileFilter", "A specialized FileFilter whose debug prompts indicate clang-format preparation."], [6, 3, 1, 0, "TidyFileFilter", "A specialized FileFilter whose debug prompts indicate clang-tidy preparation."]], "cpp_linter.common_fs.file_filter.FileFilter": [[6, 4, 1, 0, "extensions", "A set of file extensions that are considered C/C++ sources."], [6, 4, 1, 0, "ignored", "A set of ignore patterns."], [6, 7, 1, 0, "is_file_in_list", "Determine if a file is specified in a list of paths and/or filenames."], [6, 7, 1, 0, "is_source_or_ignored", "Exclude undesired files (specified by user input --extensions and --ignore options)."], [6, 7, 1, 0, "list_source_files", "Make a list of source files to be checked. This will recursively walk the file tree collecting matches to anything that would return True from is_source_or_ignored()."], [6, 4, 1, 0, "not_ignored", "A set of not-ignore patterns."], [6, 7, 1, 0, "parse_submodules", "Automatically detect submodules from the given relative path. This will add each submodule to the ignored list unless already specified as not_ignored."]], "cpp_linter.common_fs.file_filter.FileFilter.__init__": [[6, 2, 2, 0, "extensions", "A list of file extensions in which to focus."], [6, 2, 2, 0, "ignore_value", "The user input specified via --ignore CLI argument."], [6, 2, 2, 0, "not_ignored", "A list of files or paths that will be explicitly not ignored."], [6, 2, 2, 0, "tool_specific_name", "A clang tool name for which the file filter is specifically applied. This only gets used in debug statements."]], "cpp_linter.common_fs.file_filter.FileFilter.is_file_in_list": [[6, 2, 2, 0, "file_name", "The file's path & name being sought in the path_list."], [6, 2, 2, 0, "ignored", "A flag that specifies which set of list to compare with. True for ignored or False for not_ignored."]], "cpp_linter.common_fs.file_filter.FileFilter.is_source_or_ignored": [[6, 2, 2, 0, "file_name", "The name of file in question."]], "cpp_linter.common_fs.get_line_cnt_from_cols": [[5, 2, 2, 0, "file_path", "Path to file."], [5, 2, 2, 0, "offset", "The byte offset to translate"]], "cpp_linter.common_fs.has_line_changes": [[5, 2, 2, 0, "additions", "The lines with additions in the diff for a single file."], [5, 2, 2, 0, "diff_chunks", "The ranges of lines in the diff for a single file."], [5, 2, 2, 0, "lines_changed_only", "A value that means:"]], "cpp_linter.git": [[7, 1, 1, 0, "get_diff", "Retrieve the diff info about a specified commit."], [7, 1, 1, 0, "get_sha", "Uses git to fetch the full SHA hash of the current commit."], [8, 0, 0, 1, "git_str", ""], [7, 1, 1, 0, "parse_diff", "Parse a given diff into file objects."], [7, 1, 1, 0, "parse_patch", "Parse a diff's patch accordingly."]], "cpp_linter.git.get_diff": [[7, 2, 2, 0, "parents", "The number of parent commits related to the current commit."]], "cpp_linter.git.get_sha": [[7, 2, 2, 0, "parent", "This parameter's default value will fetch the SHA of the last commit. Set this parameter to the number of parent commits from the current tree's HEAD to get the desired commit's SHA hash instead."], [7, 2, 2, 0, "repo", "The object representing the git repository."]], "cpp_linter.git.git_str": [[8, 1, 1, 0, "parse_diff", "Parse a given diff into file objects."]], "cpp_linter.git.git_str.parse_diff": [[8, 2, 2, 0, "file_filter", "A FileFilter object."], [8, 2, 2, 0, "full_diff", "The complete diff for an event."], [8, 2, 2, 0, "lines_changed_only", "A value that dictates what file changes to focus on."]], "cpp_linter.git.parse_diff": [[7, 2, 2, 0, "diff_obj", "The complete git diff object for an event."], [7, 2, 2, 0, "file_filter", "A FileFilter object."], [7, 2, 2, 0, "lines_changed_only", "A value that dictates what file changes to focus on."]], "cpp_linter.git.parse_patch": [[7, 2, 2, 0, "patch", "The patch of hunks for 1 file."]], "cpp_linter.loggers": [[9, 1, 1, 0, "end_log_group", "End a collapsible group of log statements."], [9, 1, 1, 0, "log_response_msg", "Output the response buffer's message on a failed request."], [9, 6, 1, 0, "logger", "The logging.Logger object used for outputting data."], [9, 1, 1, 0, "start_log_group", "Begin a collapsible group of log statements."]], "cpp_linter.loggers.start_log_group": [[9, 2, 2, 0, "name", "The name of the collapsible group"]], "cpp_linter.rest_api": [[10, 3, 1, 0, "RateLimitHeaders", "A collection of HTTP response header keys that describe a REST API's rate limits. Each parameter corresponds to a instance attribute (see below)."], [10, 3, 1, 0, "RestApiClient", "A class that describes the API used to interact with a git server's REST API."], [11, 0, 0, 1, "github_api", ""]], "cpp_linter.rest_api.RateLimitHeaders": [[10, 4, 1, 0, "remaining", "The header key of the rate limit's remaining attempts."], [10, 4, 1, 0, "reset", "The header key of the rate limit's reset time."], [10, 4, 1, 0, "retry", "The header key of the rate limit's \"backoff\" time interval."]], "cpp_linter.rest_api.RestApiClient": [[10, 7, 1, 0, "api_request", "A helper function to streamline handling of HTTP requests' responses."], [10, 7, 1, 0, "get_list_of_changed_files", "Fetch a list of the event's changed files."], [10, 7, 1, 0, "has_more_pages", "A helper function to parse a HTTP request's response headers to determine if the previous REST API call is paginated."], [10, 7, 1, 0, "make_comment", "Make an MarkDown comment from the given advice. Also returns a count of checks failed for each tool (clang-format and clang-tidy)"], [10, 7, 1, 0, "make_headers", "Create a dict for use in REST API headers."], [10, 7, 1, 0, "post_feedback", "Post action's results using REST API."], [10, 7, 1, 0, "set_exit_code", "Set the action's output values and shows them in the log output."]], "cpp_linter.rest_api.RestApiClient.__init__": [[10, 2, 2, 0, "rate_limit_headers", "See RateLimitHeaders class."]], "cpp_linter.rest_api.RestApiClient.api_request": [[10, 2, 2, 0, "data", "The HTTP request payload data."], [10, 2, 2, 0, "headers", "The HTTP request headers to use. This can be used to override the default headers used."], [10, 2, 2, 0, "method", "The HTTP request method. The default value None means \"GET\" if data is None else \"POST\""], [10, 2, 2, 0, "strict", "If this is set True, then an HTTPError will be raised when the HTTP request responds with a status code greater than or equal to 400."], [10, 2, 2, 0, "url", "The  HTTP request URL."]], "cpp_linter.rest_api.RestApiClient.get_list_of_changed_files": [[10, 2, 2, 0, "file_filter", "A FileFilter obj to filter files."], [10, 2, 2, 0, "lines_changed_only", "A value that dictates what file changes to focus on."]], "cpp_linter.rest_api.RestApiClient.has_more_pages": [[10, 2, 2, 0, "response", "A HTTP request's response."]], "cpp_linter.rest_api.RestApiClient.make_comment": [[10, 2, 2, 0, "files", "A list of objects, each describing a file's information."], [10, 2, 2, 0, "format_checks_failed", "The amount of clang-format checks that have failed."], [10, 2, 2, 0, "len_limit", "The length limit of the comment generated."], [10, 2, 2, 0, "tidy_checks_failed", "The amount of clang-tidy checks that have failed."]], "cpp_linter.rest_api.RestApiClient.make_headers": [[10, 2, 2, 0, "use_diff", "A flag to indicate that the returned format should be in diff syntax."]], "cpp_linter.rest_api.RestApiClient.post_feedback": [[10, 2, 2, 0, "args", "A namespace of arguments parsed from the CLI."], [10, 2, 2, 0, "files", "A list of objects, each describing a file's information."]], "cpp_linter.rest_api.RestApiClient.set_exit_code": [[10, 2, 2, 0, "checks_failed", "A int describing the total number of checks that failed."], [10, 2, 2, 0, "format_checks_failed", "A int describing the number of checks that failed only for clang-format."], [10, 2, 2, 0, "tidy_checks_failed", "A int describing the number of checks that failed only for clang-tidy."]], "cpp_linter.rest_api.github_api": [[11, 3, 1, 0, "GithubApiClient", "A class that describes the API used to interact with Github's REST API."]], "cpp_linter.rest_api.github_api.GithubApiClient": [[11, 4, 1, 0, "api_url", "The base domain for the REST API"], [11, 7, 1, 0, "create_review_comments", "Creates a batch of comments for a specific clang tool's PR review"], [11, 4, 1, 0, "debug_enabled", "A flag that describes if debug logs are enabled."], [11, 4, 1, 0, "event_name", "The triggering event type's name"], [11, 7, 1, 0, "get_list_of_changed_files", "Fetch a list of the event's changed files."], [11, 7, 1, 0, "make_annotations", "Use github log commands to make annotations from clang-format and clang-tidy output."], [11, 7, 1, 0, "make_headers", "Create a dict for use in REST API headers."], [11, 7, 1, 0, "post_feedback", "Post action's results using REST API."], [11, 4, 1, 0, "pull_request", "The pull request number for the event (if applicable)."], [11, 7, 1, 0, "remove_bot_comments", "Traverse the list of comments made by a specific user and remove all."], [11, 4, 1, 0, "repo", "The owner/repository name."], [11, 7, 1, 0, "set_exit_code", "Set the action's output values and shows them in the log output."], [11, 4, 1, 0, "sha", "The HEAD commit's SHA"], [11, 7, 1, 0, "update_comment", "Updates the comment for an existing comment or posts a new comment if update_only is False."], [11, 7, 1, 0, "verify_files_are_present", "Download the files if not present."]], "cpp_linter.rest_api.github_api.GithubApiClient.get_list_of_changed_files": [[11, 2, 2, 0, "file_filter", "A FileFilter obj to filter files."], [11, 2, 2, 0, "lines_changed_only", "A value that dictates what file changes to focus on."]], "cpp_linter.rest_api.github_api.GithubApiClient.make_annotations": [[11, 2, 2, 0, "files", "A list of objects, each describing a file's information."], [11, 2, 2, 0, "style", "The chosen code style guidelines. The value 'file' is replaced with 'custom style'."]], "cpp_linter.rest_api.github_api.GithubApiClient.make_headers": [[11, 2, 2, 0, "use_diff", "A flag to indicate that the returned format should be in diff syntax."]], "cpp_linter.rest_api.github_api.GithubApiClient.post_feedback": [[11, 2, 2, 0, "args", "A namespace of arguments parsed from the CLI."], [11, 2, 2, 0, "files", "A list of objects, each describing a file's information."]], "cpp_linter.rest_api.github_api.GithubApiClient.remove_bot_comments": [[11, 2, 2, 0, "comments_url", "The URL used to fetch the comments."], [11, 2, 2, 0, "delete", "A flag describing if first applicable bot comment should be deleted or not."]], "cpp_linter.rest_api.github_api.GithubApiClient.set_exit_code": [[11, 2, 2, 0, "checks_failed", "A int describing the total number of checks that failed."], [11, 2, 2, 0, "format_checks_failed", "A int describing the number of checks that failed only for clang-format."], [11, 2, 2, 0, "tidy_checks_failed", "A int describing the number of checks that failed only for clang-tidy."]], "cpp_linter.rest_api.github_api.GithubApiClient.update_comment": [[11, 2, 2, 0, "comment", "The Comment to post."], [11, 2, 2, 0, "comments_url", "The URL used to fetch the comments."], [11, 2, 2, 0, "is_lgtm", "A flag the describes if the comment being posted is essentially a \"Looks Good To Me\" comment."], [11, 2, 2, 0, "no_lgtm", "A flag to control if a \"Looks Good To Me\" comment should be posted. If this is True, then an outdated bot comment will still be deleted."], [11, 2, 2, 0, "update_only", "A flag that describes if the outdated bot comment should only be updated (instead of replaced)."]], "cpp_linter.rest_api.github_api.GithubApiClient.verify_files_are_present": [[11, 2, 2, 0, "files", "A list of files to check for existence."]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "parameter", "Python parameter"], "3": ["py", "class", "Python class"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "property", "Python property"], "6": ["py", "data", "Python data"], "7": ["py", "method", "Python method"], "8": ["std", "cmdoption", "program option"]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:parameter", "3": "py:class", "4": "py:attribute", "5": "py:property", "6": "py:data", "7": "py:method", "8": "std:cmdoption"}, "terms": {"": [1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 13, 16], "0": [4, 5, 7, 13], "1": [3, 4, 5, 7, 13, 15, 16], "10": 13, "14": 3, "17": 13, "2": [5, 7, 15], "20": 13, "4": 13, "400": 10, "6": 13, "7": 13, "8": 13, "9": 13, "A": [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 14], "AND": 6, "By": 16, "For": [5, 13, 14, 15], "If": [0, 3, 5, 10, 11, 13, 16], "In": 13, "It": [7, 13], "Not": 16, "ON": 13, "OR": 6, "On": 12, "The": [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16], "There": [13, 16], "These": 13, "To": [11, 13, 14, 16], "_build": 12, "abbrevi": 16, "about": [2, 3, 7, 8, 13, 16], "absolut": [5, 13], "abstract": 10, "accept": [13, 16], "accordingli": 7, "action": [10, 11, 13, 14, 16], "actual": 5, "ad": [5, 13], "add": [6, 13], "addit": [5, 7, 13], "address": 16, "adher": 2, "adjust": 16, "advantag": 16, "advic": 10, "affect": 13, "aggreg": 1, "all": [1, 5, 11, 13, 16], "allow": [15, 16], "alreadi": [6, 13], "also": [5, 7, 10, 13, 15, 16], "although": 13, "alwai": [13, 16], "amount": 10, "an": [2, 5, 7, 8, 10, 11, 13, 15, 16], "analysi": 16, "analyz": [1, 4, 5, 7, 13], "ani": [5, 8, 10, 11, 13, 16], "annot": [4, 11, 13, 14], "anyth": 6, "anywai": 16, "api": [10, 11, 16], "api_request": 10, "api_url": 11, "appear": 13, "append": 13, "appli": [2, 3, 5, 6, 13, 16], "applic": 11, "applied_fix": 3, "appropri": 5, "approv": [13, 16], "ar": [5, 6, 7, 11, 13, 14, 15, 16], "arg": [1, 3, 4, 10, 11, 13], "argument": [3, 4, 5, 6, 10, 11], "argumentpars": 4, "around": [11, 13], "artifact": 5, "assembl": [1, 5], "assemble_version_exec": 1, "assert": 5, "assum": 11, "asterisk": 13, "attempt": [10, 13], "attent": 5, "attribut": [4, 10], "authent": 13, "automat": [6, 13, 16], "avail": 13, "avoid": [13, 16], "backoff": 10, "bad": 11, "base": [1, 5, 10, 11], "basic": 13, "batch": 11, "becaus": [7, 16], "been": 16, "befor": [13, 15], "begin": [5, 9, 13], "behavior": 13, "being": [5, 6, 11], "below": 10, "between": 13, "bewar": 16, "bind": 8, "blank": 13, "block": [3, 16], "bool": [2, 3, 4, 5, 6, 10, 11], "boost": [4, 13], "bot": 11, "both": 16, "brows": 12, "browser": 12, "buffer": [2, 9], "bug": [8, 14], "bugpron": [4, 13], "build": 13, "byte": [2, 5], "bytearrai": 2, "c": [3, 4, 6, 8, 13], "cach": 5, "cache_path": 5, "call": [10, 11], "can": [5, 10, 13, 16], "cannot": [5, 16], "captur": 1, "capture_clang_tools_output": 1, "care": 5, "case": [13, 16], "cc": [4, 13], "certain": [2, 3, 5], "chang": [2, 3, 4, 5, 7, 8, 10, 11, 13, 16], "charact": [3, 13], "check": [3, 4, 6, 10, 11, 13, 15], "checks_fail": [10, 11], "choos": 16, "chosen": 11, "chunk": 5, "ci": [14, 15], "clang": [0, 1, 2, 3, 4, 5, 6, 10, 11, 13, 14, 16], "class": [2, 3, 4, 5, 6, 10, 11], "cli": [1, 5, 6, 7, 10, 11, 14], "close": 16, "closest": 13, "cmake": 13, "cmake_export_compile_command": 13, "code": [3, 10, 11, 14, 16], "col": [2, 3], "collaps": [9, 16], "collect": [6, 10, 14], "column": [2, 3, 5], "combin": 16, "comma": [3, 13], "command": [0, 1, 2, 3, 11, 14], "comment": [2, 3, 4, 5, 10, 11, 13, 14, 16], "comments_url": 11, "commit": [7, 11, 15, 16], "common": 10, "compar": 6, "compat": 5, "compens": 5, "compil": [3, 13, 16], "compile_command": [3, 13], "complet": [7, 8], "compon": 3, "concern": [2, 3, 16], "conclud": 13, "condit": 5, "config": 13, "configur": [2, 3, 16], "consid": 6, "construct": 5, "contain": [2, 3, 5, 7, 8, 13, 16], "content": [2, 13, 15], "continu": [7, 16], "control": [11, 13], "convers": 16, "convert": 13, "core": 13, "correspond": [4, 10], "count": [5, 10], "cpp": [3, 4, 5, 9, 13, 14, 15], "cpp_linter": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "cpp_linter_pr_review_summary_onli": 16, "cppcoreguidelin": [4, 13], "cpu": 13, "creat": [2, 3, 5, 10, 11], "create_review_com": 11, "current": [7, 16], "custom": [11, 13], "cxx": [4, 13], "d": 13, "data": [9, 10], "databas": [3, 4, 13], "db_json": 3, "deal": 8, "debug": [5, 6, 11, 13], "debug_en": 11, "decis": 16, "declar": [4, 13], "decod": 3, "default": [4, 5, 7, 10, 13, 16], "defin": [5, 13], "delet": [7, 11, 13, 15], "delimit": 5, "depend": [12, 16], "deriv": 10, "describ": [3, 7, 10, 11], "descript": 14, "deseri": 3, "design": [5, 11], "desir": [3, 7, 13], "detail": [3, 10, 13], "detect": 6, "determin": [6, 10], "develop": 7, "diagnost": [3, 16], "diagnostic_link": 3, "dict": [3, 4, 5, 10, 11], "dictat": [7, 8, 10, 11], "did": 16, "diff": [2, 3, 5, 6, 7, 8, 10, 11, 13, 16], "diff_chunk": 5, "diff_obj": 7, "differ": [3, 11, 13, 16], "diffhunk": [5, 7], "difficulti": 13, "dilig": 16, "direct": 13, "directori": [11, 12, 13], "disabl": [2, 3, 13], "dismiss": 16, "do": [12, 16], "doc": 13, "document": [3, 14, 16], "doe": [5, 13, 16], "domain": [11, 13], "don": 5, "done": 13, "download": [11, 15], "draft": 16, "duplic": 16, "e": 13, "each": [2, 4, 6, 7, 10, 11, 13], "easi": 5, "either": 16, "element": 7, "els": 10, "empti": 5, "enabl": [2, 3, 11, 13, 16], "encourag": 16, "end": [5, 7, 9], "end_log_group": 9, "entir": 13, "entri": 13, "entrypoint": 0, "environ": [7, 13, 16], "equal": [10, 13], "equival": 3, "error": [2, 3, 16], "essenti": 11, "even": 5, "event": [2, 3, 5, 7, 8, 10, 11, 13, 15], "event_nam": 11, "everi": [13, 16], "exampl": 13, "exclud": 6, "execut": [0, 1, 13], "exempt": 13, "exhaust": 15, "exist": [11, 13, 15], "experiment": 13, "explicitli": [6, 13], "export": 2, "express": 3, "extens": [4, 6, 13], "extra": [3, 4, 13], "extra_arg": [3, 4, 13], "f": 13, "fail": [8, 9, 10, 11], "fals": [4, 5, 6, 10, 11, 13], "featur": [14, 15, 16], "feedback": 13, "fetch": [7, 10, 11, 15], "file": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 16], "file_annot": [4, 13], "file_filt": [7, 8, 10, 11], "file_nam": 6, "file_obj": [2, 3], "file_path": 5, "filefilt": [6, 7, 8, 10, 11], "filenam": [2, 3, 6, 13], "fileobj": [1, 2, 3, 5, 6, 7, 8, 10, 11], "files_changed_onli": [4, 13], "filter": [6, 10, 11, 13, 16], "first": [3, 11, 13], "fit": [5, 16], "fix": [2, 3, 16], "fixit_lin": 3, "flag": [2, 3, 5, 6, 10, 11], "focu": [2, 3, 5, 6, 7, 8, 10, 11, 13], "focus": 5, "folder": 11, "follow": [12, 13, 15], "forc": [2, 3], "form": [5, 14], "format": [0, 1, 2, 3, 4, 5, 6, 10, 11, 13, 14, 15, 16], "format_advic": 5, "format_checks_fail": [10, 11], "format_review": [2, 4, 13], "formatadvic": [2, 5], "formatfilefilt": 6, "formatreplac": 2, "formatreplacementlin": 2, "found": 11, "from": [0, 1, 2, 3, 5, 6, 7, 10, 11, 12, 13, 16], "full": [7, 16], "full_diff": 8, "function": [5, 7, 8, 10, 11], "further": 13, "g": 13, "gener": [5, 10, 16], "get": [5, 6, 7, 10, 15], "get_cli_pars": 4, "get_diff": 7, "get_line_cnt_from_col": 5, "get_list_of_changed_fil": [10, 11], "get_rang": 5, "get_sha": 7, "git": [5, 10], "github": [4, 11, 13, 16], "github_token": [13, 16], "githubapicli": 11, "gitmodul": 6, "give": 5, "given": [1, 5, 6, 7, 8, 10, 16], "glob": 13, "good": [11, 13], "greater": 10, "group": [9, 13], "guidelin": 11, "h": [4, 13], "ha": [13, 16], "handl": 10, "has_line_chang": 5, "has_more_pag": 10, "hash": 7, "have": [5, 10, 13, 16], "head": [7, 11], "header": [5, 10, 11], "help": 16, "helper": [5, 10], "here": [8, 13], "hh": [4, 13], "hidden": [13, 16], "hide": 16, "hold": [7, 10, 11], "how": 16, "howev": 16, "howtosetuptoolingforllvm": 13, "hpp": [4, 13], "html": [12, 13], "http": [10, 13], "httperror": 10, "hunk": [5, 7], "hxx": [4, 13], "i": [0, 3, 4, 5, 6, 7, 8, 10, 11, 13, 15, 16], "ideal": 5, "ignor": [4, 6, 13], "ignore_format": [4, 13], "ignore_tidi": [4, 13], "ignore_valu": 6, "implement": 16, "implic": 13, "includ": [5, 13, 16], "index": [5, 7], "indic": [5, 6, 10, 11, 16], "info": [2, 3, 7, 13], "inform": [1, 2, 3, 6, 7, 8, 10, 11, 16], "initi": [3, 4], "input": [6, 13], "instal": [1, 12, 13], "instanc": [8, 10], "instead": [7, 11, 12, 13], "int": [2, 3, 4, 5, 7, 8, 10, 11], "integr": [7, 16], "interact": [10, 11, 16], "interfac": 14, "internet": 12, "interv": 10, "invok": 11, "is_file_in_list": 6, "is_hunk_contain": 5, "is_lgtm": 11, "is_range_contain": 5, "is_source_or_ignor": 6, "isn": 16, "issu": [11, 14], "item": [3, 7], "j": 13, "job": [4, 13], "json": [3, 5, 13], "keep": 16, "kei": 10, "kind": 16, "kwarg": 4, "l": 13, "last": 7, "left": 16, "len_limit": 10, "length": 10, "less": 13, "level": [3, 13], "lgtm": [4, 13], "libgit2": 8, "librari": [8, 13], "like": 16, "limit": [10, 16], "line": [0, 2, 3, 4, 5, 7, 14, 15, 16], "line_numb": 2, "lines_ad": 5, "lines_changed_onli": [2, 3, 4, 5, 7, 8, 10, 11, 13], "link": 3, "linter": [3, 9, 13, 14, 15], "linter_cach": 5, "linux": 12, "list": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 15], "list_source_fil": 6, "liter": 13, "llvm": [4, 13], "local": 7, "locat": 13, "log": [9, 10, 11, 13, 16], "log_response_msg": 9, "long": 3, "look": [11, 13], "m": 13, "made": [11, 16], "mai": [5, 12, 13, 16], "main": 0, "make": [6, 10, 11], "make_annot": 11, "make_com": 10, "make_head": [10, 11], "mani": 16, "mark": 16, "markdown": [3, 10], "marker": 13, "match": [6, 13], "me": [11, 13], "mean": [5, 10], "mechan": 6, "messag": 9, "metadata": 15, "method": [5, 10], "might": 16, "mit": 14, "mode": 5, "modern": [4, 13], "modul": [7, 10, 11], "more": [13, 16], "most": [2, 11], "mostli": 5, "multipl": 13, "must": 13, "name": [1, 2, 5, 6, 9, 11, 13, 16], "namespac": [1, 4, 10, 11], "need": [12, 13, 15, 16], "new": [11, 13], "next": 10, "ninja": 13, "no_lgtm": [4, 11, 13], "nois": 16, "none": [1, 2, 3, 4, 5, 6, 7, 9, 10, 11], "nor": 13, "not_ignor": 6, "notif": [3, 13], "notification_lin": 3, "null_len": 2, "number": [1, 2, 3, 5, 7, 10, 11, 13], "numer": 13, "obj": [10, 11], "object": [2, 3, 6, 7, 8, 9, 10, 11], "oddli": 5, "offset": 5, "often": 16, "omit": 7, "onc": 13, "one": [6, 13], "onli": [2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 15, 16], "option": [4, 6, 14], "order": [6, 13], "org": 13, "organ": [15, 16], "other": [10, 13], "otherwis": [6, 10, 13], "our": 16, "out": [15, 16], "outdat": [11, 13, 15, 16], "output": [1, 2, 3, 5, 7, 9, 10, 11, 12, 13], "overrid": 10, "owner": 11, "p": 13, "page": 10, "pagin": 10, "paramet": [1, 2, 3, 5, 6, 7, 8, 9, 10, 11], "parent": [7, 13], "pars": [1, 2, 3, 6, 7, 8, 10, 11, 13], "parse_diff": [7, 8], "parse_format_replacements_xml": 2, "parse_patch": 7, "parse_submodul": 6, "parse_tidy_output": 3, "part": 13, "pass": [10, 11, 13, 16], "passiv": [4, 13, 15], "passive_review": [4, 13], "patch": [2, 5, 7, 16], "path": [1, 2, 3, 5, 6, 13], "path_list": 6, "pattern": [6, 13], "payload": 10, "perform": [4, 13], "pip": 12, "pip3": 12, "platform": 13, "pleas": [14, 16], "point": 3, "popul": 5, "portabl": [4, 13], "posixpath": 5, "possibl": 13, "post": [5, 10, 11, 13, 14, 15], "post_feedback": [10, 11], "pr": [2, 3, 5, 11, 13, 16], "preced": 6, "prefix": 13, "prepar": 6, "present": 11, "prevent": [13, 16], "previou": 10, "prioriti": 3, "privat": 13, "privileg": 13, "problem": 16, "process": 13, "project": 14, "prompt": 6, "proper": 16, "properli": 16, "properti": [3, 5], "provid": [13, 14, 16], "pseudo": 4, "pull": [11, 13], "pull_request": [11, 15], "purepath": 6, "push": [15, 16], "pygit2": 8, "python": 14, "question": 6, "quot": 13, "r": [12, 13], "rais": 10, "rang": [5, 7], "range_of_changed_lin": 5, "rate": 10, "rate_limit_head": 10, "ratelimithead": 10, "rational": 3, "read": [13, 15], "readabl": [4, 13], "recommend": 13, "recurs": 6, "reduc": 16, "refer": [11, 16], "reform": 3, "regul": 3, "reintroduc": 8, "rel": [2, 6, 13], "relat": 7, "relationship": 13, "releas": 14, "reli": 13, "remain": 10, "rememb": 16, "remov": [2, 11, 13], "remove_bot_com": 11, "render": 12, "replac": [2, 11], "replaced_lin": 2, "repo": [4, 7, 11, 13], "repo_root": [4, 13], "report": [14, 16], "repositori": [7, 11, 12, 13, 14, 15, 16], "repres": [2, 3, 5, 7, 13], "represent": 13, "request": [9, 10, 11, 13, 14], "requir": [5, 12, 15], "reset": 10, "resolv": [2, 3, 16], "respond": 10, "respons": [9, 10], "rest": [10, 11, 16], "restapicli": 10, "result": [1, 5, 10, 11, 13], "retri": 10, "retriev": 7, "return": [2, 3, 5, 6, 7, 8, 10, 11], "reusabl": 6, "review": [2, 3, 4, 5, 11, 13], "root": [4, 11, 12, 13], "rule": [2, 13], "run": [0, 2, 3, 13, 15], "run_clang_format": 2, "run_clang_tidi": 3, "runner": 13, "sai": 13, "same": [11, 16], "script": [0, 14], "search": 13, "secret": 16, "see": [4, 10, 12, 13, 14, 16], "separ": [3, 13], "sequenc": 5, "serial": 5, "server": 10, "set": [2, 3, 6, 7, 10, 11, 13, 16], "set_exit_cod": [10, 11], "setup": 4, "sever": 3, "sha": [7, 11], "should": [5, 10, 11, 13], "show": [10, 11, 16], "shown": [5, 16], "similar": 16, "simultan": 13, "sinc": 5, "singl": [2, 5], "so": 16, "sole": 13, "some": [5, 7, 13, 16], "sought": 6, "sourc": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13], "space": [3, 13], "special": 6, "specif": [3, 6, 11, 16], "specifi": [5, 6, 7, 13, 15], "specified_vers": 1, "sphinx": 12, "split": 3, "start": [2, 5, 7], "start_log_group": 9, "statement": [6, 9], "static": [10, 11], "statu": 10, "std": [3, 13], "stdout": 3, "step": [4, 12, 13], "step_summari": [4, 13], "still": [11, 16], "str": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "streamlin": 10, "strict": 10, "strictli": 5, "string": [2, 13], "style": [2, 4, 5, 11, 13, 16], "submodul": [6, 13], "subpackag": 10, "subtract": [5, 13], "suffici": 15, "suggest": [2, 3, 16], "sum": [2, 3], "summari": [4, 13, 16], "summary_onli": 11, "summat": 16, "suppli": 13, "support": [13, 14, 16], "syntax": [10, 11], "t": [5, 13, 16], "take": 16, "tally_format_advic": 2, "tally_tidy_advic": 3, "target": 16, "test": 16, "text": 2, "than": [10, 13], "thei": [11, 13], "them": [10, 11], "thi": [1, 2, 5, 6, 7, 8, 10, 11, 13, 14, 15, 16], "thread": [4, 13, 14, 16], "thread_com": 4, "through": 13, "tidi": [0, 1, 2, 3, 4, 5, 6, 10, 11, 13, 14, 15, 16], "tidy_advic": 5, "tidy_check": [4, 13], "tidy_checks_fail": [10, 11], "tidy_out": 3, "tidy_review": [3, 4, 13], "tidy_tool": 11, "tidyadvic": [3, 5], "tidyfilefilt": 6, "tidynotif": 3, "time": 10, "token": 16, "tool": [1, 5, 6, 10, 11, 13, 16], "tool_nam": 1, "tool_specific_nam": 6, "total": [10, 11], "translat": 5, "travers": 11, "tree": [6, 7, 13], "trigger": [3, 11, 13, 16], "true": [4, 6, 10, 11, 13, 16], "tupl": [3, 5, 7, 11], "txt": 12, "type": 11, "u": [15, 16], "unchang": [5, 13], "under": 14, "undesir": 6, "unix": [5, 13], "unless": 6, "up": 13, "updat": [7, 11, 13, 15], "update_com": 11, "update_onli": 11, "url": [10, 11], "us": [2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16], "usag": 13, "use_diff": [10, 11], "user": [6, 11, 13, 16], "usual": [2, 3], "v": 13, "valid": [3, 6], "valu": [4, 5, 7, 8, 10, 11, 13], "variabl": [13, 16], "verbos": [4, 5, 13], "verify_files_are_pres": 11, "version": [1, 4, 13], "via": 6, "w": 13, "wa": [2, 3, 8, 10, 11, 13], "wai": 16, "walk": 6, "wall": [3, 13], "want": 7, "warn": [3, 9, 16], "we": [5, 7, 16], "were": [13, 16], "what": [7, 8, 10, 11, 13, 16], "when": [5, 8, 10, 13, 15, 16], "where": [2, 3, 7, 13, 16], "which": [2, 5, 6, 13], "while": [13, 16], "whitespac": 3, "whole": 5, "whose": 6, "window": 5, "within": [5, 16], "without": [6, 13], "won": 16, "work": [11, 13], "workflow": [7, 13, 14, 16], "would": 6, "write": [13, 15], "x": 13, "xml": 2, "xml_out": 2, "you": [12, 13], "your": 12}, "titles": ["<code class=\"docutils literal notranslate\"><span class=\"pre\">__init__</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">clang_tools</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">clang_tools.clang_format</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">clang_tools.clang_tidy</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">cli</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">common_fs</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">common_fs.file_filter</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">git</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">git.git_str</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">loggers</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">rest_api</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">rest_api.github_api</span></code>", "How to build the docs", "Command Line Interface Options", "C/C++ Linting Package", "Token Permissions", "Pull Request Review Caveats"], "titleterms": {"__init__": 0, "argument": 13, "auto": 16, "bot": 16, "build": 12, "c": 14, "caveat": 16, "certain": 16, "chang": 15, "clang_format": 2, "clang_tidi": 3, "clang_tool": [1, 2, 3], "cli": 4, "command": 13, "comment": 15, "common_f": [5, 6], "disabl": 16, "doc": 12, "each": 16, "event": 16, "exhaust": 16, "feedback": 14, "file": 15, "file_filt": 6, "git": [7, 8], "git_str": 8, "github_api": 11, "have": 14, "hint": [11, 16], "how": 12, "import": 13, "interfac": 13, "licens": 14, "line": 13, "lint": 14, "logger": 9, "new": 16, "non": 16, "note": [3, 7, 13], "option": 13, "packag": 14, "permiss": [15, 16], "posit": 13, "post": 16, "probabl": 16, "pull": [15, 16], "question": 14, "request": [15, 16], "requir": 16, "rest_api": [10, 11], "review": [15, 16], "run": 16, "seealso": [11, 13, 16], "thread": 15, "tip": [5, 16], "token": 15, "type": 16, "usag": 14}})