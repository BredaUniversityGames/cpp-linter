Search.setIndex({"titles": ["<code class=\"docutils literal notranslate\"><span class=\"pre\">__init__</span></code> module", "<code class=\"docutils literal notranslate\"><span class=\"pre\">clang_format_xml</span></code> module", "<code class=\"docutils literal notranslate\"><span class=\"pre\">clang_tidy</span></code> module", "<code class=\"docutils literal notranslate\"><span class=\"pre\">clang_tidy_yml</span></code> module", "<code class=\"docutils literal notranslate\"><span class=\"pre\">git</span></code> module", "<code class=\"docutils literal notranslate\"><span class=\"pre\">run</span></code> module", "<code class=\"docutils literal notranslate\"><span class=\"pre\">thread_comments</span></code> module", "How to build the docs", "Command Line Interface Options", "C/C++ Linting Package"], "terms": {"The": [0, 1, 2, 3, 4, 5, 6, 8, 9], "base": [0, 5], "cpp_linter": [0, 1, 2, 3, 4, 5, 6], "packag": 0, "thi": [0, 1, 3, 4, 5, 6, 8, 9], "hold": [0, 4], "object": [0, 1, 2, 3, 4, 6], "share": 0, "multipl": [0, 8], "logger": 0, "cpp": [0, 5, 8, 9], "linter": [0, 5, 8, 9], "warn": [0, 1, 2], "log": [0, 1, 2, 5, 8], "us": [0, 1, 3, 4, 5, 6, 7, 8], "output": [0, 1, 2, 3, 4, 5, 6, 7], "data": 0, "make_head": 0, "use_diff": 0, "bool": [0, 5], "fals": [0, 5, 8], "dict": [0, 4, 5, 6], "str": [0, 1, 2, 3, 4, 5, 6], "sourc": [0, 1, 2, 3, 4, 5, 6, 8], "creat": [0, 2, 3, 5, 6], "rest": [0, 5, 6, 8], "api": [0, 1, 3, 5, 6, 8], "header": [0, 3], "paramet": [0, 1, 2, 3, 4, 5, 6], "A": [0, 1, 2, 3, 4, 5, 6, 8, 9], "flag": [0, 5, 6], "indic": [0, 6], "return": [0, 4, 5, 6], "format": [0, 1, 3, 5, 6, 8, 9], "should": [0, 5, 6, 8], "diff": [0, 4, 5, 6, 8], "syntax": 0, "request": [0, 5, 9], "call": 0, "class": [0, 1, 2, 3], "global": 0, "variabl": [0, 8], "re": 0, "non": 0, "constant": [0, 3], "tidy_com": 0, "accumul": 0, "clang": [0, 1, 2, 3, 5, 6, 8, 9], "tidi": [0, 1, 2, 3, 5, 6, 8, 9], "get": [0, 4], "append": [0, 8], "action": [0, 5, 6, 8, 9], "n": 0, "report": [0, 9], "bodi": 0, "result": [0, 2, 5, 8], "comment": [0, 5, 6, 8, 9], "post": [0, 5, 9], "file": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], "list": [0, 1, 2, 3, 4, 5, 6, 8], "ani": [0, 4, 5, 6, 8], "respond": 0, "payload": 0, "contain": [0, 4, 5, 8], "info": [0, 2, 4, 5, 8], "about": [0, 1, 4, 5], "chang": [0, 4, 5, 8], "event_payload": 0, "pars": [0, 1, 2, 3, 4, 5], "json": [0, 5, 6, 8], "event": [0, 4, 5, 6, 8], "response_buff": 0, "respons": 0, "none": [0, 1, 2, 5, 6], "globalpars": 0, "specif": [0, 2, 6], "parser": 0, "each": [0, 1, 3, 4, 5, 6, 8], "element": [0, 4, 6], "follow": [0, 7, 8], "attribut": [0, 5], "repres": [0, 1, 2, 3, 4, 6, 8], "tool": [0, 8], "": [0, 1, 2, 3, 4, 5, 6, 8], "1": [0, 4, 5], "tidy_not": [0, 2, 5], "tidynotif": [0, 2, 5], "can": [0, 5, 8], "onli": [0, 4, 5, 6, 8], "type": 0, "tidy_advic": [0, 3, 6], "ymlfixit": [0, 3], "format_advic": [0, 1, 6], "xmlfixit": [0, 1], "get_line_cnt_from_col": 0, "file_path": 0, "offset": 0, "int": [0, 1, 2, 3, 4, 5, 6], "tupl": [0, 2, 4, 5], "line": [0, 1, 2, 3, 4, 5, 6, 9], "count": 0, "column": [0, 1, 2, 3], "from": [0, 1, 2, 3, 4, 5, 6, 7, 8], "absolut": [0, 3, 8], "path": [0, 3, 5, 8], "byte": [0, 1, 3], "translat": 0, "2": [0, 4, 5], "number": [0, 1, 2, 3, 4, 5, 6], "index": [0, 4, 5, 9], "0": [0, 4, 5], "i": [0, 1, 3, 4, 5, 6, 8], "given": [0, 4, 5], "range_of_changed_lin": 0, "file_obj": [0, 5], "lines_changed_onli": [0, 5, 6, 8], "get_rang": 0, "assembl": 0, "focu": [0, 5, 6], "certain": [0, 5, 6], "focus": 0, "all": [0, 4, 5, 6, 8], "shown": 0, "mai": [0, 7], "includ": [0, 5, 8], "unchang": [0, 8], "strictli": 0, "addit": [0, 4, 5, 8], "sequenc": [0, 4], "rang": [0, 4], "default": [0, 4, 5, 8], "sinc": 0, "requir": [0, 7], "when": [0, 4, 5, 8], "construct": 0, "cli": [0, 4, 5, 6, 9], "argument": [0, 5, 8], "which": [0, 1, 5, 8], "give": 0, "attent": 0, "If": [0, 5, 8], "assert": 0, "log_response_msg": 0, "buffer": 0, "messag": [0, 1, 2, 3, 8], "fail": [0, 5], "describ": [0, 4, 5], "statu": 0, "code": [0, 1, 2, 5, 9], "wa": [0, 5], "less": 0, "than": [0, 8], "400": 0, "assemble_version_exec": 0, "tool_nam": 0, "specified_vers": 0, "command": [0, 1, 2, 5, 9], "execut": [0, 5], "version": [0, 5, 8], "inform": [0, 4], "name": [0, 1, 3, 5, 8], "instal": [0, 7, 8], "experiment": [1, 3], "actual": [1, 3], "product": [1, 3], "xml": 1, "suggest": [1, 3, 6], "formatreplac": 1, "col": [1, 2, 3], "null_len": [1, 3], "text": [1, 3], "an": [1, 2, 3, 4, 6, 8], "singl": [1, 3], "replac": [1, 3, 5], "where": [1, 4, 8], "start": [1, 3, 4], "remov": [1, 6, 8], "bytearrai": 1, "formatreplacementlin": 1, "line_numb": 1, "filenam": [1, 2, 3, 5, 8], "content": [1, 3, 5, 6], "export": [1, 3], "concern": [1, 2, 3], "replaced_lin": 1, "log_command": [1, 2], "style": [1, 5, 8], "line_filt": 1, "notif": [1, 2, 5], "github": [1, 2, 5, 8], "error": [1, 2], "notic": [1, 2], "chosen": [1, 5], "guidelin": [1, 5], "narrow": 1, "parse_format_replacements_xml": 1, "src_filenam": 1, "save": [1, 2, 3], "stdout": 2, "notification_lin": 2, "decod": 2, "initi": 2, "detail": 2, "first": [2, 5, 8], "differ": [2, 5, 8], "compon": 2, "diagnost": [2, 3], "trigger": [2, 3], "note_info": 2, "rational": 2, "note_typ": 2, "prioriti": 2, "level": [2, 8], "fixit_lin": 2, "block": 2, "parse_tidy_output": 2, "ar": [2, 4, 5, 8, 9], "yml": 3, "cwd_header_guard": 3, "b": 3, "_home_runner_work_cpp_linter_cpp_lint": 3, "trim": 3, "guard": 3, "tidydiagnost": 3, "diagnostic_nam": 3, "found": [3, 5], "yaml": 3, "check": [3, 5, 8], "got": 3, "tidyreplac": 3, "line_cnt": 3, "length": 3, "discard": 3, "parse_tidy_suggestions_yml": 3, "read": [3, 8], "commit": [4, 5], "It": [4, 8], "also": [4, 8], "some": 4, "function": [4, 5, 6], "relat": 4, "get_sha": 4, "parent": [4, 8], "fetch": [4, 5, 6], "full": 4, "sha": 4, "hash": 4, "current": [4, 8], "local": [4, 5], "develop": 4, "environ": [4, 8], "continu": 4, "integr": 4, "workflow": [4, 8, 9], "valu": [4, 5, 8], "last": 4, "set": [4, 5, 6, 8], "tree": [4, 8], "head": [4, 6], "desir": [4, 5, 8], "instead": [4, 7, 8], "get_diff": 4, "retriev": 4, "specifi": [4, 5, 6, 8], "consolidate_list_to_rang": 4, "helper": [4, 5], "filter_out_non_source_fil": [4, 5], "parse_diff": 4, "extract": 4, "integ": 4, "consolid": 4, "have": [4, 8], "item": [4, 5], "end": [4, 5], "full_diff": 4, "complet": 4, "delet": 4, "omit": 4, "becaus": [4, 8], "we": 4, "want": 4, "analyz": [4, 8], "updat": [4, 5], "parse_patch": 4, "full_patch": 4, "patch": 4, "accordingli": 4, "entir": [4, 8], "hunk": 4, "provid": [5, 8, 9], "main": 5, "entrypoint": 5, "refer": 5, "pull": 5, "repo": [5, 8], "issu": [5, 9], "set_exit_cod": 5, "overrid": 5, "exit": [5, 8], "logic": 5, "pass": [5, 6, 8], "like": 5, "start_log_group": 5, "begin": [5, 8], "collaps": 5, "group": 5, "statement": 5, "end_log_group": 5, "is_file_in_list": 5, "file_nam": 5, "prompt": 5, "determin": 5, "compar": 5, "must": [5, 8], "part": [5, 8], "being": 5, "sought": 5, "debug": [5, 8], "true": [5, 6, 8], "get_list_of_changed_fil": 5, "ext_list": 5, "ignor": [5, 8], "not_ignor": 5, "exclud": 5, "undesir": 5, "user": [5, 6], "input": [5, 8], "extens": [5, 8], "filter": 5, "appli": [5, 8], "examin": 5, "explicitli": [5, 8], "what": [5, 8], "invok": 5, "earli": 5, "verify_files_are_pres": 5, "download": 5, "present": 5, "assum": [5, 6], "work": [5, 8], "directori": [5, 7, 8], "root": [5, 7, 8], "repositori": [5, 7, 8, 9], "thei": 5, "bad": 5, "same": [5, 6], "folder": 5, "list_source_fil": 5, "ignored_path": 5, "make": 5, "store": 5, "attend": 5, "run_clang_tidi": 5, "databas": [5, 8], "repo_root": [5, 8], "extra_arg": [5, 8], "comma": [5, 8], "separ": [5, 8], "regul": 5, "express": 5, "enabl": [5, 8], "configur": 5, "forc": 5, "compil": [5, 8], "extra": [5, 8], "long": 5, "space": [5, 8], "reform": 5, "split": 5, "whitespac": 5, "charact": [5, 8], "arg": [5, 8], "std": [5, 8], "c": [5, 8], "14": [5, 8], "wall": [5, 8], "equival": 5, "run_clang_format": 5, "rule": [5, 8], "adher": 5, "rel": [5, 8], "most": 5, "create_comment_bodi": 5, "thread": [5, 8, 9], "capture_clang_tools_output": 5, "cach": 5, "avoid": [5, 8], "duplic": 5, "later": 5, "again": 5, "make_annot": 5, "after": 5, "finish": 5, "captur": 5, "aggreg": [5, 6], "post_push_com": 5, "base_url": 5, "user_id": [5, 6], "push": 5, "url": [5, 6], "interact": 5, "via": [5, 6], "account": [5, 6], "id": [5, 6], "soft": 5, "post_diff_com": 5, "insid": 5, "unifi": 5, "pr": 5, "support": [5, 8, 9], "post_pr_com": 5, "post_result": 5, "use_diff_com": 5, "41898282": 5, "gener": [5, 6], "bot": [5, 6], "file_annot": [5, 8], "annot": [5, 8, 9], "custom": [5, 8], "correspond": [5, 6], "option": [5, 6, 9], "mean": 5, "chunk": 5, "boolean": 5, "were": 5, "made": [5, 6], "parse_ignore_opt": 5, "string": [5, 8], "conform": 5, "script": [5, 9], "hous": 6, "variou": 6, "travers": 6, "adjust": 6, "remove_bot_com": 6, "comments_url": 6, "aggregate_tidy_advic": 6, "advic": 6, "aggregate_format_advic": 6, "concatenate_com": 6, "concaten": 6, "here": [6, 8], "list_diff_com": 6, "get_review_id": 6, "reviews_url": 6, "dismiss": 6, "stale": 6, "review": 6, "ones": 6, "our": 6, "find_review": 6, "find": 6, "git": 6, "do": 7, "step": [7, 8], "depend": 7, "pip": 7, "r": [7, 8], "txt": 7, "On": 7, "linux": 7, "you": [7, 8], "need": [7, 8], "pip3": 7, "sphinx": 7, "_build": 7, "html": [7, 8], "brows": 7, "your": 7, "internet": 7, "browser": 7, "see": [7, 8, 9], "render": 7, "h": 8, "help": 8, "show": 8, "v": 8, "verbos": 8, "control": 8, "defin": 8, "doe": 8, "affect": 8, "10": 8, "aka": 8, "p": 8, "For": [8, 9], "exampl": 8, "cmake": 8, "build": 8, "compile_command": 8, "exist": 8, "cmake_export_compile_command": 8, "ON": 8, "search": 8, "attempt": 8, "through": 8, "http": 8, "llvm": 8, "org": 8, "doc": 8, "howtosetuptoolingforllvm": 8, "up": 8, "closest": 8, "blank": 8, "disabl": 8, "tidy_check": 8, "glob": 8, "prefix": 8, "process": 8, "order": 8, "appear": 8, "without": 8, "add": 8, "match": 8, "possibl": 8, "reli": 8, "sole": 8, "config": 8, "boost": 8, "bugpron": 8, "perform": 8, "readabl": 8, "portabl": 8, "modern": 8, "cppcoreguidelin": 8, "more": 8, "accept": 8, "8": 8, "9": 8, "11": 8, "12": 8, "13": 8, "15": 8, "platform": 8, "locat": 8, "convert": 8, "e": 8, "hpp": 8, "cc": 8, "hh": 8, "cxx": 8, "hxx": 8, "runner": 8, "github_workspac": 8, "ci": [8, 9], "In": 8, "case": 8, "There": 8, "entri": 8, "ha": 8, "submodul": 8, "automat": 8, "hidden": 8, "pattern": 8, "asterisk": 8, "liter": 8, "l": 8, "subtract": 8, "f": 8, "files_changed_onli": 8, "github_token": 8, "suppli": 8, "run": 8, "privat": 8, "otherwis": 8, "privileg": 8, "authent": 8, "t": 8, "thread_com": 8, "feedback": 8, "To": [8, 9], "declar": 8, "featur": [8, 9], "behav": 8, "w": 8, "summari": 8, "step_summari": 8, "conclud": 8, "x": 8, "onc": 8, "recommend": 8, "quot": 8, "around": 8, "between": 8, "17": 8, "python": 9, "collect": 9, "form": 9, "descript": 9, "interfac": 9, "document": 9, "bug": 9, "pleas": 9, "project": 9, "releas": 9, "under": 9, "mit": 9, "modul": 9}, "objects": {"": [[0, 0, 0, 1, "cpp_linter", ""], [8, 7, 1, "cmdoption-p", "--database", ""], [8, 7, 1, "cmdoption-e", "--extensions", ""], [8, 7, 1, "cmdoption-x", "--extra-arg", ""], [8, 7, 1, "cmdoption-a", "--file-annotations", ""], [8, 7, 1, "cmdoption-f", "--files-changed-only", ""], [8, 7, 1, "cmdoption-h", "--help", ""], [8, 7, 1, "cmdoption-i", "--ignore", ""], [8, 7, 1, "cmdoption-l", "--lines-changed-only", ""], [8, 7, 1, "cmdoption-r", "--repo-root", ""], [8, 7, 1, "cmdoption-w", "--step-summary", ""], [8, 7, 1, "cmdoption-s", "--style", ""], [8, 7, 1, "cmdoption-t", "--thread-comments", ""], [8, 7, 1, "cmdoption-c", "--tidy-checks", ""], [8, 7, 1, "cmdoption-v", "--verbosity", ""], [8, 7, 1, "cmdoption-V", "--version", ""], [8, 7, 1, "cmdoption-V", "-V", ""], [8, 7, 1, "cmdoption-a", "-a", ""], [8, 7, 1, "cmdoption-c", "-c", ""], [8, 7, 1, "cmdoption-e", "-e", ""], [8, 7, 1, "cmdoption-f", "-f", ""], [8, 7, 1, "cmdoption-h", "-h", ""], [8, 7, 1, "cmdoption-i", "-i", ""], [8, 7, 1, "cmdoption-l", "-l", ""], [8, 7, 1, "cmdoption-p", "-p", ""], [8, 7, 1, "cmdoption-r", "-r", ""], [8, 7, 1, "cmdoption-s", "-s", ""], [8, 7, 1, "cmdoption-t", "-t", ""], [8, 7, 1, "cmdoption-v", "-v", ""], [8, 7, 1, "cmdoption-w", "-w", ""], [8, 7, 1, "cmdoption-x", "-x", ""]], "cpp_linter": [[0, 1, 1, 0, "GlobalParser", "Global variables specific to output parsers. Each element in each of the following attributes represents a clang-tool's output for 1 source file."], [0, 1, 1, 0, "Globals", "Global variables for re-use (non-constant)."], [0, 3, 1, 0, "assemble_version_exec", "Assembles the command to the executable of the given clang tool based on given version information."], [1, 0, 0, 1, "clang_format_xml", ""], [2, 0, 0, 1, "clang_tidy", ""], [3, 0, 0, 1, "clang_tidy_yml", ""], [0, 3, 1, 0, "get_line_cnt_from_cols", "Gets a line count and columns offset from a file's absolute offset."], [4, 0, 0, 1, "git", ""], [0, 3, 1, 0, "log_response_msg", "Output the response buffer's message on a failed request."], [0, 6, 1, 0, "logger", "The logging.Logger object used for outputting data."], [0, 3, 1, 0, "make_headers", "Create a dict for use in REST API headers."], [0, 3, 1, 0, "range_of_changed_lines", "Assemble a list of lines changed."], [5, 0, 0, 1, "run", ""], [6, 0, 0, 1, "thread_comments", ""]], "cpp_linter.GlobalParser": [[0, 2, 1, 0, "format_advice", "This can only be a list of type XMLFixit."], [0, 2, 1, 0, "tidy_advice", "This can only be a list of type YMLFixit."], [0, 2, 1, 0, "tidy_notes", "This can only be a list of type TidyNotification."]], "cpp_linter.Globals": [[0, 2, 1, 0, "EVENT_PAYLOAD", "The parsed JSON of the event payload."], [0, 2, 1, 0, "FILES", "The responding payload containing info about changed files."], [0, 2, 1, 0, "OUTPUT", "The accumulated body of the resulting comment that gets posted."], [0, 2, 1, 0, "TIDY_COMMENT", "The accumulated output of clang-tidy (gets appended to OUTPUT)"], [0, 2, 1, 0, "response_buffer", "A shared response object for requests module."]], "cpp_linter.assemble_version_exec": [[0, 4, 2, 0, "specified_version", "The version number or the installed path to a version of the tool's executable."], [0, 4, 2, 0, "tool_name", "The name of the clang tool to be executed."]], "cpp_linter.clang_format_xml": [[1, 1, 1, 0, "FormatReplacement", "An object representing a single replacement."], [1, 1, 1, 0, "FormatReplacementLine", "An object that represents a replacement(s) for a single line."], [1, 1, 1, 0, "XMLFixit", "A single object to represent each suggestion."], [1, 3, 1, 0, "parse_format_replacements_xml", "Parse XML output of replacements from clang-format. Output is saved to format_advice."]], "cpp_linter.clang_format_xml.FormatReplacement.__init__": [[1, 4, 2, 0, "cols", "The columns number of where the suggestion starts on the line"], [1, 4, 2, 0, "null_len", "The number of bytes removed by suggestion"], [1, 4, 2, 0, "text", "The bytearray of the suggestion"]], "cpp_linter.clang_format_xml.FormatReplacement": [[1, 2, 1, 0, "cols", "The columns number of where the suggestion starts on the line"], [1, 2, 1, 0, "null_len", "The number of bytes removed by suggestion"], [1, 2, 1, 0, "text", "The bytearray of the suggestion"]], "cpp_linter.clang_format_xml.FormatReplacementLine.__init__": [[1, 4, 2, 0, "line_numb", "The line number of about the replacements"]], "cpp_linter.clang_format_xml.FormatReplacementLine": [[1, 2, 1, 0, "line", "The line number of where the suggestion starts"], [1, 2, 1, 0, "replacements", "A list of FormatReplacement object(s) representing suggestions."]], "cpp_linter.clang_format_xml.XMLFixit.__init__": [[1, 4, 2, 0, "filename", "The source file's name for which the contents of the xml file exported by clang-tidy."]], "cpp_linter.clang_format_xml.XMLFixit": [[1, 2, 1, 0, "filename", "The source file that the suggestion concerns."], [1, 5, 1, 0, "log_command", "Output a notification as a github log command."], [1, 2, 1, 0, "replaced_lines", "A list of FormatReplacementLine representing replacement(s) on a single line."]], "cpp_linter.clang_format_xml.XMLFixit.log_command": [[1, 4, 2, 0, "line_filter", "A list of lines numbers used to narrow notifications."], [1, 4, 2, 0, "style", "The chosen code style guidelines."]], "cpp_linter.clang_format_xml.parse_format_replacements_xml": [[1, 4, 2, 0, "src_filename", "The source file's name for which the contents of the xml file exported by clang-tidy."]], "cpp_linter.clang_tidy": [[2, 1, 1, 0, "TidyNotification", "Create a object that decodes info from the clang-tidy output's initial line that details a specific notification."], [2, 3, 1, 0, "parse_tidy_output", "Parse clang-tidy output in a file created from stdout. The results are saved to tidy_notes."]], "cpp_linter.clang_tidy.TidyNotification.__init__": [[2, 4, 2, 0, "notification_line", "The first line in the notification parsed into a tuple of str that represent the different components of the notification's details."]], "cpp_linter.clang_tidy.TidyNotification": [[2, 2, 1, 0, "cols", "The columns of the line that triggered the notification."], [2, 2, 1, 0, "diagnostic", "The columns of the line that triggered the notification."], [2, 2, 1, 0, "filename", "The source filename concerning the notification."], [2, 2, 1, 0, "fixit_lines", "A list of lines for the code-block in the notification."], [2, 2, 1, 0, "line", "The line number of the source file."], [2, 5, 1, 0, "log_command", "Output the notification as a github log command."], [2, 2, 1, 0, "note_info", "The rationale of the notification."], [2, 2, 1, 0, "note_type", "The priority level of notification (warning/error)."]], "cpp_linter.clang_tidy_yml": [[3, 6, 1, 0, "CWD_HEADER_GUARD", "The constant used to trim absolute paths from header guard suggestions."], [3, 1, 1, 0, "TidyDiagnostic", "Create an object that represents a diagnostic output found in the YAML exported from clang-tidy."], [3, 1, 1, 0, "TidyReplacement", "Create an object representing a clang-tidy suggested replacement."], [3, 1, 1, 0, "YMLFixit", "A single object to represent each suggestion."], [3, 3, 1, 0, "parse_tidy_suggestions_yml", "Read a YAML file from clang-tidy and create a list of suggestions from it. Output is saved to tidy_advice."]], "cpp_linter.clang_tidy_yml.TidyDiagnostic.__init__": [[3, 4, 2, 0, "diagnostic_name", "The name of the check that got triggered."]], "cpp_linter.clang_tidy_yml.TidyDiagnostic": [[3, 2, 1, 0, "cols", "The columns of the line that triggered the diagnostic"], [3, 2, 1, 0, "line", "The line number that triggered the diagnostic"], [3, 2, 1, 0, "message", "The diagnostic message"], [3, 2, 1, 0, "name", "The diagnostic name"], [3, 2, 1, 0, "null_len", "The number of bytes replaced by suggestions"], [3, 2, 1, 0, "replacements", "The list of TidyReplacement objects."]], "cpp_linter.clang_tidy_yml.TidyReplacement.__init__": [[3, 4, 2, 0, "cols", "The replacement content's starting columns"], [3, 4, 2, 0, "length", "The number of bytes discarded from cols"], [3, 4, 2, 0, "line_cnt", "The replacement content's starting line"]], "cpp_linter.clang_tidy_yml.TidyReplacement": [[3, 2, 1, 0, "cols", "The replacement content's starting columns"], [3, 2, 1, 0, "line", "The replacement content's starting line"], [3, 2, 1, 0, "null_len", "The number of bytes discarded from cols"], [3, 2, 1, 0, "text", "The replacement content's text."]], "cpp_linter.clang_tidy_yml.YMLFixit.__init__": [[3, 4, 2, 0, "filename", "The source file's name (with path) concerning the suggestion."]], "cpp_linter.clang_tidy_yml.YMLFixit": [[3, 2, 1, 0, "diagnostics", "The list of TidyDiagnostic objects."], [3, 2, 1, 0, "filename", "The source file's name concerning the suggestion."]], "cpp_linter.get_line_cnt_from_cols": [[0, 4, 2, 0, "file_path", "Path to file."], [0, 4, 2, 0, "offset", "The byte offset to translate"]], "cpp_linter.git": [[4, 3, 1, 0, "consolidate_list_to_ranges", "A helper function to filter_out_non_source_files() and parse_diff() that is only used when extracting the lines from a diff that contain additions."], [4, 3, 1, 0, "get_diff", "Retrieve the diff info about a specified commit."], [4, 3, 1, 0, "get_sha", "Uses git to fetch the full SHA hash of the current commit."], [4, 3, 1, 0, "parse_diff", "Parse a given diff into file objects."], [4, 3, 1, 0, "parse_patch", "Parse a diff's patch accordingly."]], "cpp_linter.git.consolidate_list_to_ranges": [[4, 4, 2, 0, "numbers", "A list of integers representing the lines' numbers that contain additions."]], "cpp_linter.git.get_diff": [[4, 4, 2, 0, "parents", "The number of parent commits related to the current commit."]], "cpp_linter.git.get_sha": [[4, 4, 2, 0, "parent", "This parameter's default value will fetch the SHA of the last commit. Set this parameter to the number of parent commits from the current tree's HEAD to get the desired commit's SHA hash instead."]], "cpp_linter.git.parse_diff": [[4, 4, 2, 0, "full_diff", "The complete diff for an event."]], "cpp_linter.git.parse_patch": [[4, 4, 2, 0, "full_patch", "The entire patch of hunks for 1 file."]], "cpp_linter.make_headers": [[0, 4, 2, 0, "use_diff", "A flag to indicate that the returned format should be in diff syntax."]], "cpp_linter.range_of_changed_lines": [[0, 4, 2, 0, "file_obj", "The file's JSON object."], [0, 4, 2, 0, "get_ranges", "A flag to return a list of sequences representing range parameters. Defaults to False since this is only required when constructing clang-tidy or clang-format CLI arguments."], [0, 4, 2, 0, "lines_changed_only", "A flag to indicate the focus of certain lines."]], "cpp_linter.run": [[5, 3, 1, 0, "capture_clang_tools_output", "Execute and capture all output from clang-tidy and clang-format. This aggregates results in the OUTPUT."], [5, 3, 1, 0, "create_comment_body", "Create the content for a thread comment about a certain file. This is a helper function to capture_clang_tools_output()."], [5, 3, 1, 0, "end_log_group", "End a collapsable group of log statements."], [5, 3, 1, 0, "filter_out_non_source_files", "Exclude undesired files (specified by user input --extensions). This filtering is applied to the FILES attribute."], [5, 3, 1, 0, "get_list_of_changed_files", "Fetch a list of the event's changed files. Sets the FILES attribute."], [5, 3, 1, 0, "is_file_in_list", "Determine if a file is specified in a list of paths and/or filenames."], [5, 3, 1, 0, "list_source_files", "Make a list of source files to be checked. The resulting list is stored in FILES."], [5, 3, 1, 0, "main", "The main script."], [5, 3, 1, 0, "make_annotations", "Use github log commands to make annotations from clang-format and clang-tidy output."], [5, 3, 1, 0, "parse_ignore_option", "Parse a given string of paths (separated by a |) into ignored and not_ignored lists of strings."], [5, 3, 1, 0, "post_diff_comments", "Post comments inside a unified diff (only PRs are supported)."], [5, 3, 1, 0, "post_pr_comment", "POST action's results for a push event."], [5, 3, 1, 0, "post_push_comment", "POST action's results for a push event."], [5, 3, 1, 0, "post_results", "Post action's results using REST API."], [5, 3, 1, 0, "run_clang_format", "Run clang-format on a certain file"], [5, 3, 1, 0, "run_clang_tidy", "Run clang-tidy on a certain file."], [5, 3, 1, 0, "set_exit_code", "Set the action's exit code."], [5, 3, 1, 0, "start_log_group", "Begin a collapsable group of log statements."], [5, 3, 1, 0, "verify_files_are_present", "Download the files if not present."]], "cpp_linter.run.capture_clang_tools_output": [[5, 4, 2, 0, "checks", "The str of comma-separated regulate expressions that describe the desired clang-tidy checks to be enabled/configured."], [5, 4, 2, 0, "database", "The path to the compilation database."], [5, 4, 2, 0, "extra_args", "A list of extra arguments used by clang-tidy as compiler arguments."], [5, 4, 2, 0, "lines_changed_only", "A flag that forces focus on only changes in the event's diff info."], [5, 4, 2, 0, "repo_root", "The path to the repository root folder."], [5, 4, 2, 0, "style", "The clang-format style rules to adhere. Set this to 'file' to use the relative-most .clang-format configuration file."], [5, 4, 2, 0, "version", "The version of clang-tidy to run."]], "cpp_linter.run.create_comment_body": [[5, 4, 2, 0, "file_obj", "The file's JSON dict."], [5, 4, 2, 0, "filename", "The file's name (& path)."], [5, 4, 2, 0, "lines_changed_only", "A flag used to filter the comment based on line changes."], [5, 4, 2, 0, "tidy_notes", "A list of cached notifications from clang-tidy. This is used to avoid duplicated content in comment, and it is later used again by make_annotations() after capture_clang_tools_output() is finished."]], "cpp_linter.run.filter_out_non_source_files": [[5, 4, 2, 0, "ext_list", "A list of file extensions that are to be examined."], [5, 4, 2, 0, "ignored", "A list of paths to explicitly ignore."], [5, 4, 2, 0, "lines_changed_only", "A flag used for additional filtering based on what lines are changed in the file(s)."], [5, 4, 2, 0, "not_ignored", "A list of paths to explicitly not ignore."]], "cpp_linter.run.is_file_in_list": [[5, 4, 2, 0, "file_name", "The file's path & name being sought in the paths list."], [5, 4, 2, 0, "paths", "A list of specified paths to compare with. This list can contain a specified file, but the file's path must be included as part of the filename."], [5, 4, 2, 0, "prompt", "A debugging prompt to use when the path is found in the list."]], "cpp_linter.run.list_source_files": [[5, 4, 2, 0, "ext_list", "A list of file extensions that should by attended."], [5, 4, 2, 0, "ignored_paths", "A list of paths to explicitly ignore."], [5, 4, 2, 0, "not_ignored", "A list of paths to explicitly not ignore."]], "cpp_linter.run.make_annotations": [[5, 4, 2, 0, "file_annotations", "A flag that corresponds to the --file-annotations CLI option."], [5, 4, 2, 0, "lines_changed_only", "Corresponds to the --lines-changed-only CLI option."], [5, 4, 2, 0, "style", "The chosen code style guidelines. The value 'file' is replaced with 'custom style'."]], "cpp_linter.run.parse_ignore_option": [[5, 4, 2, 0, "paths", "This argument conforms to the input value of CLI arg --ignore."]], "cpp_linter.run.post_diff_comments": [[5, 4, 2, 0, "base_url", "The root of the url used to interact with the REST API via requests."], [5, 4, 2, 0, "user_id", "The user's account ID number."]], "cpp_linter.run.post_pr_comment": [[5, 4, 2, 0, "base_url", "The root of the url used to interact with the REST API via requests."], [5, 4, 2, 0, "user_id", "The user's account ID number."]], "cpp_linter.run.post_push_comment": [[5, 4, 2, 0, "base_url", "The root of the url used to interact with the REST API via requests."], [5, 4, 2, 0, "user_id", "The user's account ID number."]], "cpp_linter.run.post_results": [[5, 4, 2, 0, "use_diff_comments", "This flag enables making/updating comments in the PR's diff info."], [5, 4, 2, 0, "user_id", "The user's account ID number. Defaults to the generic bot's ID."]], "cpp_linter.run.run_clang_format": [[5, 4, 2, 0, "file_obj", "JSON info about the file."], [5, 4, 2, 0, "filename", "The name of the local file to run clang-format on."], [5, 4, 2, 0, "lines_changed_only", "A flag that forces focus on only changes in the event's diff info."], [5, 4, 2, 0, "style", "The clang-format style rules to adhere. Set this to 'file' to use the relative-most .clang-format configuration file."], [5, 4, 2, 0, "version", "The version of clang-format to run."]], "cpp_linter.run.run_clang_tidy": [[5, 4, 2, 0, "checks", "The str of comma-separated regulate expressions that describe the desired clang-tidy checks to be enabled/configured."], [5, 4, 2, 0, "database", "The path to the compilation database."], [5, 4, 2, 0, "extra_args", "A list of extra arguments used by clang-tidy as compiler arguments."], [5, 4, 2, 0, "file_obj", "JSON info about the file."], [5, 4, 2, 0, "filename", "The name of the local file to run clang-tidy on."], [5, 4, 2, 0, "lines_changed_only", "A flag that forces focus on only changes in the event's diff info."], [5, 4, 2, 0, "repo_root", "The path to the repository root folder."], [5, 4, 2, 0, "version", "The version of clang-tidy to run."]], "cpp_linter.run.set_exit_code": [[5, 4, 2, 0, "override", "The number to use when overriding the action's logic."]], "cpp_linter.run.start_log_group": [[5, 4, 2, 0, "name", "The name of the collapsable group"]], "cpp_linter.thread_comments": [[6, 3, 1, 0, "aggregate_format_advice", "Aggregate a list of json contents representing advice from clang-format suggestions."], [6, 3, 1, 0, "aggregate_tidy_advice", "Aggregate a list of json contents representing advice from clang-tidy suggestions."], [6, 3, 1, 0, "concatenate_comments", "Concatenate comments made to the same line of the same file."], [6, 3, 1, 0, "find_review", "Find a review created by a certain user ID."], [6, 3, 1, 0, "get_review_id", "Dismiss all stale reviews (only the ones made by our bot)."], [6, 3, 1, 0, "list_diff_comments", "Aggregate list of comments for use in the event's diff. This function assumes that the CLI option --lines_changed_only is set to True."], [6, 3, 1, 0, "remove_bot_comments", "Traverse the list of comments made by a specific user and remove all."]], "cpp_linter.thread_comments.aggregate_format_advice": [[6, 4, 2, 0, "lines_changed_only", "A flag indicating the focus of the advice that should be headed."]], "cpp_linter.thread_comments.aggregate_tidy_advice": [[6, 4, 2, 0, "lines_changed_only", "A flag indicating the focus of the advice that should be headed."]], "cpp_linter.thread_comments.concatenate_comments": [[6, 4, 2, 0, "format_advice", "Pass the output from aggregate_format_advice() here."], [6, 4, 2, 0, "tidy_advice", "Pass the output from aggregate_tidy_advice() here."]], "cpp_linter.thread_comments.find_review": [[6, 4, 2, 0, "reviews", "the JSON object fetched via GIT REST API."], [6, 4, 2, 0, "user_id", "The user account's ID number"]], "cpp_linter.thread_comments.get_review_id": [[6, 4, 2, 0, "reviews_url", "The URL used to fetch the review comments."], [6, 4, 2, 0, "user_id", "The user's account id number."]], "cpp_linter.thread_comments.list_diff_comments": [[6, 4, 2, 0, "lines_changed_only", "A flag indicating the focus of the advice that should be headed."]], "cpp_linter.thread_comments.remove_bot_comments": [[6, 4, 2, 0, "comments_url", "The URL used to fetch the comments."], [6, 4, 2, 0, "user_id", "The user's account id number."]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:attribute", "3": "py:function", "4": "py:parameter", "5": "py:method", "6": "py:data", "7": "std:cmdoption"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "function", "Python function"], "4": ["py", "parameter", "Python parameter"], "5": ["py", "method", "Python method"], "6": ["py", "data", "Python data"], "7": ["std", "cmdoption", "program option"]}, "titleterms": {"__init__": 0, "modul": [0, 1, 2, 3, 4, 5, 6], "clang_format_xml": 1, "info": [1, 3], "seealso": [1, 2, 5], "clang_tidi": 2, "clang_tidy_yml": 3, "git": 4, "note": [4, 5, 8], "run": 5, "hint": [5, 8], "thread_com": 6, "how": 7, "build": 7, "doc": 7, "command": 8, "line": 8, "interfac": 8, "option": 8, "c": 9, "lint": 9, "packag": 9, "usag": 9, "have": 9, "question": 9, "feedback": 9, "licens": 9, "indic": 9, "tabl": 9}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1, "sphinx": 60}, "alltitles": {"__init__ module": [[0, "module-cpp_linter"]], "clang_format_xml module": [[1, "clang-format-xml-module"]], "Info": [[1, null], [3, null]], "Seealso": [[1, null], [2, null], [5, null]], "clang_tidy module": [[2, "module-cpp_linter.clang_tidy"]], "clang_tidy_yml module": [[3, "clang-tidy-yml-module"]], "git module": [[4, "module-cpp_linter.git"]], "Note": [[4, null], [4, null], [5, null], [8, null], [8, null]], "run module": [[5, "module-cpp_linter.run"]], "Hint": [[5, null], [8, null]], "thread_comments module": [[6, "module-cpp_linter.thread_comments"]], "How to build the docs": [[7, "how-to-build-the-docs"]], "Command Line Interface Options": [[8, "command-line-interface-options"]], "C/C++ Linting Package": [[9, "c-c-linting-package"]], "Usage": [[9, "usage"]], "Have question or feedback?": [[9, "have-question-or-feedback"]], "License": [[9, "license"]], "Indices and tables": [[9, "indices-and-tables"]]}, "indexentries": {"event_payload (cpp_linter.globals attribute)": [[0, "cpp_linter.Globals.EVENT_PAYLOAD"]], "files (cpp_linter.globals attribute)": [[0, "cpp_linter.Globals.FILES"]], "globalparser (class in cpp_linter)": [[0, "cpp_linter.GlobalParser"]], "globals (class in cpp_linter)": [[0, "cpp_linter.Globals"]], "output (cpp_linter.globals attribute)": [[0, "cpp_linter.Globals.OUTPUT"]], "tidy_comment (cpp_linter.globals attribute)": [[0, "cpp_linter.Globals.TIDY_COMMENT"]], "assemble_version_exec() (in module cpp_linter)": [[0, "cpp_linter.assemble_version_exec"]], "cpp_linter": [[0, "module-cpp_linter"]], "format_advice (cpp_linter.globalparser attribute)": [[0, "cpp_linter.GlobalParser.format_advice"]], "get_line_cnt_from_cols() (in module cpp_linter)": [[0, "cpp_linter.get_line_cnt_from_cols"]], "log_response_msg() (in module cpp_linter)": [[0, "cpp_linter.log_response_msg"]], "logger (in module cpp_linter)": [[0, "cpp_linter.logger"]], "make_headers() (in module cpp_linter)": [[0, "cpp_linter.make_headers"]], "module": [[0, "module-cpp_linter"], [1, "module-cpp_linter.clang_format_xml"], [2, "module-cpp_linter.clang_tidy"], [3, "module-cpp_linter.clang_tidy_yml"], [4, "module-cpp_linter.git"], [5, "module-cpp_linter.run"], [6, "module-cpp_linter.thread_comments"]], "range_of_changed_lines() (in module cpp_linter)": [[0, "cpp_linter.range_of_changed_lines"]], "response_buffer (cpp_linter.globals attribute)": [[0, "cpp_linter.Globals.response_buffer"]], "tidy_advice (cpp_linter.globalparser attribute)": [[0, "cpp_linter.GlobalParser.tidy_advice"]], "tidy_notes (cpp_linter.globalparser attribute)": [[0, "cpp_linter.GlobalParser.tidy_notes"]], "formatreplacement (class in cpp_linter.clang_format_xml)": [[1, "cpp_linter.clang_format_xml.FormatReplacement"]], "formatreplacementline (class in cpp_linter.clang_format_xml)": [[1, "cpp_linter.clang_format_xml.FormatReplacementLine"]], "xmlfixit (class in cpp_linter.clang_format_xml)": [[1, "cpp_linter.clang_format_xml.XMLFixit"]], "cols (cpp_linter.clang_format_xml.formatreplacement attribute)": [[1, "cpp_linter.clang_format_xml.FormatReplacement.cols"]], "cpp_linter.clang_format_xml": [[1, "module-cpp_linter.clang_format_xml"]], "filename (cpp_linter.clang_format_xml.xmlfixit attribute)": [[1, "cpp_linter.clang_format_xml.XMLFixit.filename"]], "line (cpp_linter.clang_format_xml.formatreplacementline attribute)": [[1, "cpp_linter.clang_format_xml.FormatReplacementLine.line"]], "log_command() (cpp_linter.clang_format_xml.xmlfixit method)": [[1, "cpp_linter.clang_format_xml.XMLFixit.log_command"]], "null_len (cpp_linter.clang_format_xml.formatreplacement attribute)": [[1, "cpp_linter.clang_format_xml.FormatReplacement.null_len"]], "parse_format_replacements_xml() (in module cpp_linter.clang_format_xml)": [[1, "cpp_linter.clang_format_xml.parse_format_replacements_xml"]], "replaced_lines (cpp_linter.clang_format_xml.xmlfixit attribute)": [[1, "cpp_linter.clang_format_xml.XMLFixit.replaced_lines"]], "replacements (cpp_linter.clang_format_xml.formatreplacementline attribute)": [[1, "cpp_linter.clang_format_xml.FormatReplacementLine.replacements"]], "text (cpp_linter.clang_format_xml.formatreplacement attribute)": [[1, "cpp_linter.clang_format_xml.FormatReplacement.text"]], "tidynotification (class in cpp_linter.clang_tidy)": [[2, "cpp_linter.clang_tidy.TidyNotification"]], "cols (cpp_linter.clang_tidy.tidynotification attribute)": [[2, "cpp_linter.clang_tidy.TidyNotification.cols"]], "cpp_linter.clang_tidy": [[2, "module-cpp_linter.clang_tidy"]], "diagnostic (cpp_linter.clang_tidy.tidynotification attribute)": [[2, "cpp_linter.clang_tidy.TidyNotification.diagnostic"]], "filename (cpp_linter.clang_tidy.tidynotification attribute)": [[2, "cpp_linter.clang_tidy.TidyNotification.filename"]], "fixit_lines (cpp_linter.clang_tidy.tidynotification attribute)": [[2, "cpp_linter.clang_tidy.TidyNotification.fixit_lines"]], "line (cpp_linter.clang_tidy.tidynotification attribute)": [[2, "cpp_linter.clang_tidy.TidyNotification.line"]], "log_command() (cpp_linter.clang_tidy.tidynotification method)": [[2, "cpp_linter.clang_tidy.TidyNotification.log_command"]], "note_info (cpp_linter.clang_tidy.tidynotification attribute)": [[2, "cpp_linter.clang_tidy.TidyNotification.note_info"]], "note_type (cpp_linter.clang_tidy.tidynotification attribute)": [[2, "cpp_linter.clang_tidy.TidyNotification.note_type"]], "parse_tidy_output() (in module cpp_linter.clang_tidy)": [[2, "cpp_linter.clang_tidy.parse_tidy_output"]], "cwd_header_guard (in module cpp_linter.clang_tidy_yml)": [[3, "cpp_linter.clang_tidy_yml.CWD_HEADER_GUARD"]], "tidydiagnostic (class in cpp_linter.clang_tidy_yml)": [[3, "cpp_linter.clang_tidy_yml.TidyDiagnostic"]], "tidyreplacement (class in cpp_linter.clang_tidy_yml)": [[3, "cpp_linter.clang_tidy_yml.TidyReplacement"]], "ymlfixit (class in cpp_linter.clang_tidy_yml)": [[3, "cpp_linter.clang_tidy_yml.YMLFixit"]], "cols (cpp_linter.clang_tidy_yml.tidydiagnostic attribute)": [[3, "cpp_linter.clang_tidy_yml.TidyDiagnostic.cols"]], "cols (cpp_linter.clang_tidy_yml.tidyreplacement attribute)": [[3, "cpp_linter.clang_tidy_yml.TidyReplacement.cols"]], "cpp_linter.clang_tidy_yml": [[3, "module-cpp_linter.clang_tidy_yml"]], "diagnostics (cpp_linter.clang_tidy_yml.ymlfixit attribute)": [[3, "cpp_linter.clang_tidy_yml.YMLFixit.diagnostics"]], "filename (cpp_linter.clang_tidy_yml.ymlfixit attribute)": [[3, "cpp_linter.clang_tidy_yml.YMLFixit.filename"]], "line (cpp_linter.clang_tidy_yml.tidydiagnostic attribute)": [[3, "cpp_linter.clang_tidy_yml.TidyDiagnostic.line"]], "line (cpp_linter.clang_tidy_yml.tidyreplacement attribute)": [[3, "cpp_linter.clang_tidy_yml.TidyReplacement.line"]], "message (cpp_linter.clang_tidy_yml.tidydiagnostic attribute)": [[3, "cpp_linter.clang_tidy_yml.TidyDiagnostic.message"]], "name (cpp_linter.clang_tidy_yml.tidydiagnostic attribute)": [[3, "cpp_linter.clang_tidy_yml.TidyDiagnostic.name"]], "null_len (cpp_linter.clang_tidy_yml.tidydiagnostic attribute)": [[3, "cpp_linter.clang_tidy_yml.TidyDiagnostic.null_len"]], "null_len (cpp_linter.clang_tidy_yml.tidyreplacement attribute)": [[3, "cpp_linter.clang_tidy_yml.TidyReplacement.null_len"]], "parse_tidy_suggestions_yml() (in module cpp_linter.clang_tidy_yml)": [[3, "cpp_linter.clang_tidy_yml.parse_tidy_suggestions_yml"]], "replacements (cpp_linter.clang_tidy_yml.tidydiagnostic attribute)": [[3, "cpp_linter.clang_tidy_yml.TidyDiagnostic.replacements"]], "text (cpp_linter.clang_tidy_yml.tidyreplacement attribute)": [[3, "cpp_linter.clang_tidy_yml.TidyReplacement.text"]], "consolidate_list_to_ranges() (in module cpp_linter.git)": [[4, "cpp_linter.git.consolidate_list_to_ranges"]], "cpp_linter.git": [[4, "module-cpp_linter.git"]], "get_diff() (in module cpp_linter.git)": [[4, "cpp_linter.git.get_diff"]], "get_sha() (in module cpp_linter.git)": [[4, "cpp_linter.git.get_sha"]], "parse_diff() (in module cpp_linter.git)": [[4, "cpp_linter.git.parse_diff"]], "parse_patch() (in module cpp_linter.git)": [[4, "cpp_linter.git.parse_patch"]], "capture_clang_tools_output() (in module cpp_linter.run)": [[5, "cpp_linter.run.capture_clang_tools_output"]], "cpp_linter.run": [[5, "module-cpp_linter.run"]], "create_comment_body() (in module cpp_linter.run)": [[5, "cpp_linter.run.create_comment_body"]], "end_log_group() (in module cpp_linter.run)": [[5, "cpp_linter.run.end_log_group"]], "filter_out_non_source_files() (in module cpp_linter.run)": [[5, "cpp_linter.run.filter_out_non_source_files"]], "get_list_of_changed_files() (in module cpp_linter.run)": [[5, "cpp_linter.run.get_list_of_changed_files"]], "is_file_in_list() (in module cpp_linter.run)": [[5, "cpp_linter.run.is_file_in_list"]], "list_source_files() (in module cpp_linter.run)": [[5, "cpp_linter.run.list_source_files"]], "main() (in module cpp_linter.run)": [[5, "cpp_linter.run.main"]], "make_annotations() (in module cpp_linter.run)": [[5, "cpp_linter.run.make_annotations"]], "parse_ignore_option() (in module cpp_linter.run)": [[5, "cpp_linter.run.parse_ignore_option"]], "post_diff_comments() (in module cpp_linter.run)": [[5, "cpp_linter.run.post_diff_comments"]], "post_pr_comment() (in module cpp_linter.run)": [[5, "cpp_linter.run.post_pr_comment"]], "post_push_comment() (in module cpp_linter.run)": [[5, "cpp_linter.run.post_push_comment"]], "post_results() (in module cpp_linter.run)": [[5, "cpp_linter.run.post_results"]], "run_clang_format() (in module cpp_linter.run)": [[5, "cpp_linter.run.run_clang_format"]], "run_clang_tidy() (in module cpp_linter.run)": [[5, "cpp_linter.run.run_clang_tidy"]], "set_exit_code() (in module cpp_linter.run)": [[5, "cpp_linter.run.set_exit_code"]], "start_log_group() (in module cpp_linter.run)": [[5, "cpp_linter.run.start_log_group"]], "verify_files_are_present() (in module cpp_linter.run)": [[5, "cpp_linter.run.verify_files_are_present"]], "aggregate_format_advice() (in module cpp_linter.thread_comments)": [[6, "cpp_linter.thread_comments.aggregate_format_advice"]], "aggregate_tidy_advice() (in module cpp_linter.thread_comments)": [[6, "cpp_linter.thread_comments.aggregate_tidy_advice"]], "concatenate_comments() (in module cpp_linter.thread_comments)": [[6, "cpp_linter.thread_comments.concatenate_comments"]], "cpp_linter.thread_comments": [[6, "module-cpp_linter.thread_comments"]], "find_review() (in module cpp_linter.thread_comments)": [[6, "cpp_linter.thread_comments.find_review"]], "get_review_id() (in module cpp_linter.thread_comments)": [[6, "cpp_linter.thread_comments.get_review_id"]], "list_diff_comments() (in module cpp_linter.thread_comments)": [[6, "cpp_linter.thread_comments.list_diff_comments"]], "remove_bot_comments() (in module cpp_linter.thread_comments)": [[6, "cpp_linter.thread_comments.remove_bot_comments"]], "--database": [[8, "cmdoption-p"]], "--extensions": [[8, "cmdoption-e"]], "--extra-arg": [[8, "cmdoption-x"]], "--file-annotations": [[8, "cmdoption-a"]], "--files-changed-only": [[8, "cmdoption-f"]], "--help": [[8, "cmdoption-h"]], "--ignore": [[8, "cmdoption-i"]], "--lines-changed-only": [[8, "cmdoption-l"]], "--repo-root": [[8, "cmdoption-r"]], "--step-summary": [[8, "cmdoption-w"]], "--style": [[8, "cmdoption-s"]], "--thread-comments": [[8, "cmdoption-t"]], "--tidy-checks": [[8, "cmdoption-c"]], "--verbosity": [[8, "cmdoption-v"]], "--version": [[8, "cmdoption-V"]], "-v": [[8, "cmdoption-V"], [8, "cmdoption-v"]], "-a": [[8, "cmdoption-a"]], "-c": [[8, "cmdoption-c"]], "-e": [[8, "cmdoption-e"]], "-f": [[8, "cmdoption-f"]], "-h": [[8, "cmdoption-h"]], "-i": [[8, "cmdoption-i"]], "-l": [[8, "cmdoption-l"]], "-p": [[8, "cmdoption-p"]], "-r": [[8, "cmdoption-r"]], "-s": [[8, "cmdoption-s"]], "-t": [[8, "cmdoption-t"]], "-w": [[8, "cmdoption-w"]], "-x": [[8, "cmdoption-x"]], "command line option": [[8, "cmdoption-V"], [8, "cmdoption-a"], [8, "cmdoption-c"], [8, "cmdoption-e"], [8, "cmdoption-f"], [8, "cmdoption-h"], [8, "cmdoption-i"], [8, "cmdoption-l"], [8, "cmdoption-p"], [8, "cmdoption-r"], [8, "cmdoption-s"], [8, "cmdoption-t"], [8, "cmdoption-v"], [8, "cmdoption-w"], [8, "cmdoption-x"]]}, "docurls": ["API-Reference/cpp_linter.html", "API-Reference/cpp_linter.clang_format_xml.html", "API-Reference/cpp_linter.clang_tidy.html", "API-Reference/cpp_linter.clang_tidy_yml.html", "API-Reference/cpp_linter.git.html", "API-Reference/cpp_linter.run.html", "API-Reference/cpp_linter.thread_comments.html", "building_docs.html", "cli_args.html", "index.html"]})