[build-system]
requires = ["setuptools>=77", "setuptools-scm"]
build-backend = "setuptools.build_meta"

[project]
name = "cpp-linter"
description = "Run clang-format and clang-tidy on a batch of files."
readme = "README.rst"
keywords = ["clang", "clang-tools", "linter", "clang-tidy", "clang-format"]
license = "MIT"
authors = [
    { name = "Brendan Doherty", email = "2bndy5@gmail.com" },
    { name = "Xianpeng Shen", email = "xianpeng.shen@gmail.com" },
]
requires-python = ">=3.9"
classifiers = [
    # https://pypi.org/pypi?%3Aaction=list_classifiers
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "Intended Audience :: Information Technology",
    "Natural Language :: English",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX :: Linux",
    "Operating System :: MacOS",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Build Tools",
]
dynamic = ["version", "dependencies"]

[project.scripts]
cpp-linter = "cpp_linter:main"

[project.urls]
source =  "https://github.com/cpp-linter/cpp-linter"
tracker = "https://github.com/cpp-linter/cpp-linter/issues"

# ... other project metadata fields as specified in:
#     https://packaging.python.org/en/latest/specifications/declaring-project-metadata/

[tool.setuptools]
zip-safe = false
packages = ["cpp_linter"]

[tool.setuptools.dynamic]
dependencies = {file = ["requirements.txt"]}

[tool.setuptools_scm]
# It would be nice to include the commit hash in the version, but that
# can't be done in a PEP 440-compatible way.
version_scheme= "no-guess-dev"
# Test PyPI does not support local versions.
local_scheme = "no-local-version"
fallback_version = "0.0.0"

[tool.mypy]
show_error_codes = true
show_column_numbers = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-vv --durations=8 --color=yes"
testpaths = ["tests"]

[tool.coverage]
[tool.coverage.run]
dynamic_context = "test_function"
# These options are useful if combining coverage data from multiple tested envs
parallel = true
relative_files = true
concurrency = ["thread", "multiprocessing"]
omit = [
    # don't include tests in coverage
    # "tests/*",
]

[tool.coverage.json]
pretty_print = true

[tool.coverage.html]
show_contexts = true

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",
    # Don\'t complain about missing debug-only code:
    "def __repr__",
    # the point of unit tests is to test parts of main()
    "def main",
    # ignore any branch that makes the module executable
    'if __name__ == "__main__"',
    # ignore missing implementations in an abstract class
    "raise NotImplementedError",
    # ignore the local specific debug statement related to not having rich installed
    "if not FOUND_RICH_LIB",
]

[tool.codespell]
skip = "tests/capture_tools_output/**/cache/**,tests/capture_tools_output/**/*.diff"
