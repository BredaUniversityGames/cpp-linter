name: Build and Test

on:
  push:
    branches: [main]
    paths:
      - "**.py"
      - "**requirements*.txt"
      - pyproject.toml
      - ".github/workflows/run-dev-tests.yml"
      - "!docs/**"
  pull_request:
    # types: opened
    branches: [main]
    paths:
      - "**.py"
      - "**requirements*.txt"
      - pyproject.toml
      - ".github/workflows/run-dev-tests.yml"
      - "!docs/**"
  workflow_dispatch:

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        os: ['windows-latest', ubuntu-22.04]
        version: ['19', '18', '17', '16', '15', '14', '13', '12', '11', '10', '9', '8']
    env:
      MAX_PYTHON_VERSION: '3.13'
      # only used when installing for a pre-released python version
      # LIBGIT2_VERSION: '1.9.0'

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: 3.x

      # - name: Checkout libgit2
      #   uses: actions/checkout@v4
      #   with:
      #     repository: libgit2/libgit2
      #     ref: v${{ env.LIBGIT2_VERSION }}
      #     path: libgit2-${{ env.LIBGIT2_VERSION }}

      # - name: Install libgit2
      #   working-directory: libgit2-${{ env.LIBGIT2_VERSION }}
      #   shell: bash
      #   run: |-
      #     cmake -B build -S . -DBUILD_TESTS=OFF
      #     cmake --build build
      #     sudo cmake --install build

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      # https://github.com/ninja-build/ninja/wiki/Pre-built-Ninja-packages
      - name: Install ninja (Linux)
        if: runner.os == 'Linux'
        run: sudo apt-get install ninja-build
      - name: Install ninja (Windows)
        if: runner.os == 'Windows'
        run: choco install ninja

      - name: Install Linux clang dependencies
        if: runner.os == 'Linux'
        shell: bash
        run: |
          sudo apt-get update
          # First try installing from default Ubuntu repositories before trying LLVM script
          if ! sudo apt-get install -y clang-format-${{ matrix.version }} clang-tidy-${{ matrix.version }}; then
            # This LLVM script will add the relevant LLVM PPA: https://apt.llvm.org/
            wget https://apt.llvm.org/llvm.sh -O ${{ runner.temp }}/llvm_install.sh
            chmod +x ${{ runner.temp }}/llvm_install.sh
            if sudo ${{ runner.temp }}/llvm_install.sh ${{ matrix.version }}; then
              sudo apt-get install -y clang-format-${{ matrix.version }} clang-tidy-${{ matrix.version }}
            fi
          fi

      - name: Install clang-tools
        run: |
          python -m pip install clang-tools
          clang-tools --install ${{ matrix.version }}

      - name: Collect Coverage
        env:
          CLANG_VERSION: ${{ matrix.version }}
        run: uvx nox -s test-all

      - name: Upload coverage data
        uses: actions/upload-artifact@v4
        with:
          name: coverage-data-${{ runner.os }}-${{ matrix.version }}
          path: .coverage*
          include-hidden-files: true

  coverage-report:
    needs: [test]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ci-artifacts
          pattern: coverage-data-*
          merge-multiple: true

      - name: Setup python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Create coverage report
        run: uvx nox -s coverage

      - name: Upload comprehensive coverage HTML report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov/

      - run: coverage report && coverage xml

      - uses: codecov/codecov-action@v5
        env:
          CODECOV_TOKEN: ${{secrets.CODECOV_TOKEN}}
        with:
          files: ./coverage.xml
          fail_ci_if_error: true # optional (default = false)
          verbose: true # optional (default = false)
